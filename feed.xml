<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="https://aaaab3n.moe/feed.xml" rel="self" type="application/atom+xml" /><link href="https://aaaab3n.moe/" rel="alternate" type="text/html" /><updated>2020-12-04T06:49:44+00:00</updated><id>https://aaaab3n.moe/feed.xml</id><title type="html">Canarypwn’s Natïve blog</title><subtitle>A life matrix to witness, think and love.</subtitle><author><name>Canarypwn</name></author><entry><title type="html">[ CS140 1-Introduction] Slides 笔记</title><link href="https://aaaab3n.moe/technology/2020/12/04/CS140-L1.html" rel="alternate" type="text/html" title="[ CS140 1-Introduction] Slides 笔记" /><published>2020-12-04T02:01:59+00:00</published><updated>2020-12-04T02:01:59+00:00</updated><id>https://aaaab3n.moe/technology/2020/12/04/CS140-L1</id><content type="html" xml:base="https://aaaab3n.moe/technology/2020/12/04/CS140-L1.html">&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;This page is based on &lt;a href=&quot;http://web.stanford.edu/~ouster/cgi-bin/cs140-spring20/index.php&quot;&gt;CS 140: Operating Systems (stanford.edu)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Homework and Slides can be found at &lt;a href=&quot;http://www.scs.stanford.edu/20wi-cs140/notes/&quot;&gt;CS140 Lecture notes (stanford.edu)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Backup on my &lt;a href=&quot;https://1drv.ms/u/s!Au3reWMu7K2ChIp_v_ywDUA3QhkIAA?e=btMkiE&quot;&gt;Onedrive&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/328021529&quot;&gt;论抄书 - 知乎 (zhihu.com)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;操作系统概论&quot;&gt;操作系统概论&lt;/h2&gt;

&lt;h3 id=&quot;原始操作系统&quot;&gt;原始操作系统&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://sn3301files.storage.live.com/y4mh0qpst6d3FEypH6IoGiDxVjKKCdGpKHMhSC5bZfyyt1yZYYUec9SstWLT4whtooAqjlrgUgLC7tzeaJpD6rN_fIRehWu8pGaErnnqxFjvqFVn_uirLresyku0tC2C2vthbApgnPJjYLtsiKAialJTFBf3Ywex3bk3eJU92oZab021xVAJ7d1sNwzihUUdGQt?width=1024&amp;amp;height=473&amp;amp;cropmode=none&quot; alt=&quot;image-20201204140048431&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;系统一次只能运行一个程序
    &lt;ul&gt;
      &lt;li&gt;OS 和 硬件都被 APP 唯一占用&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;多线程&quot;&gt;多线程&lt;/h3&gt;

&lt;p&gt;相比原始操作系统，一次可以运行多个程序&lt;/p&gt;

&lt;p&gt;但原始的多线程有诸多问题&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;无限循环&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;比如&lt;a href=&quot;https://zh.m.wikipedia.org/zh-hans/Fork%E7%82%B8%E5%BC%B9&quot;&gt;叉炸弹&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;可以利用 权限 来解决&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;内存访问无限制，会有安全问题&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;可以用 内存隔离 来解决&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;多用户操作系统&quot;&gt;多用户操作系统&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://sn3301files.storage.live.com/y4m2MKgQtle0L3ijuplaxMdkRUXbeqyalVj5tj_2hXetgcmxsmdC4bLLQCny9EN3PenhA4o5cfkk-slNREGrw2OdUdNTOQOJQ6HoINX6uss5iALIF2uAZEzWPLLq_LJxv_vuqs8NpxaVOikkYhYb8emWcpPYv8RTEpU1Tb129YTuEv-oImS0KiSskSKGQF0Mngq?width=1024&amp;amp;height=641&amp;amp;cropmode=none&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;用户需要什么就给什么，但依旧会存在一些问题：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;程序太贪了 (Chrome吃内存)&lt;/li&gt;
  &lt;li&gt;当每个程序都申请内存的时候，申请内存的总量大于物理内存
    &lt;ul&gt;
      &lt;li&gt;解决: 虚拟化 (virtual memory, swap etc.)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Super-linear slowdown with increasing demand (thrashing) （原文）
    &lt;ul&gt;
      &lt;li&gt;比如开了N个程序，每个程序只能分到 1/N 的资源&lt;/li&gt;
      &lt;li&gt;随着程序的线性增加，每个程序更处理不完，最终&lt;del&gt;堵马桶&lt;/del&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;操作系统保护&quot;&gt;操作系统保护&lt;/h3&gt;

&lt;p&gt;核心思想：隔离&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;抢占式： 给应用程序一个资源，如果别的程序需要的话，就移走它&lt;/li&gt;
  &lt;li&gt;中间层： OS用一些数据结构（比如表）来查询权限，OS会在程序访问底层的时候提供权限管理&lt;/li&gt;
  &lt;li&gt;root / user ：特权模式&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;典型的操作系统&quot;&gt;典型的操作系统&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://sn3301files.storage.live.com/y4mn70BkNola6wrRUKxV7Bj5QN44VFXohASIeb2ikpUVlLjnkl2MYqbzeNH1QkULsc7-0FN2GZW2TT-Oh_I_m07KphZPO5d4R17WKwk_9V0BhzN9OVXC6U7Nzd8Mmjjj8I_f9crtPX9Hjw9nzVGDuyfok87qqksz0oOjkUMnf9leuxixYX6-a7y-yqakT412d_V?width=1024&amp;amp;height=568&amp;amp;cropmode=none&quot; alt=&quot;image-20201204141457542&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;程序在 user 层执行，低权限&lt;/li&gt;
  &lt;li&gt;OS 在 kernal 层执行，高权限&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;系统调用-system-call&quot;&gt;系统调用 (System Call)&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://sn3301files.storage.live.com/y4m4DCvJ_GPptwN7oLAeNjf6FkfMmijOfzzjcALtwCHHkO678KEk19-9siDkwGPI_P7b7X81vBMcsO_iknQqbgiFjAQNZp0lv0_CCOVGanpcKwfQR4DyOc4pJnwO_T2Z68FPByMLSVv0y83v1PZXQXwn_BHbOOm5uEAtEBFexQ5Cg7jUAwR4JQ2ixyo88Z-ntja?width=1024&amp;amp;height=601&amp;amp;cropmode=none&quot; alt=&quot;image-20201204141729074&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Applications can invoke kernel through system calls&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;应用程序可以通过系统调用来调用内核 (用特殊指令)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;应用程序&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;printf, scanf, fgets etc.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;系统接口&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;open, close, read, write etc. ( POSIX/UNIX )&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Example&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;printf 调用 write&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;img src=&quot;https://sn3301files.storage.live.com/y4mwvjtlByIoqbz6XTb5wfKLEMvzd5w1YWP_7fYROH8f0pXG4kQ4mO_h9WjHkIWrTwCVKojznhdFFH9BMXme91Owb8DpHJniqb_7MB2tg1KwJ42AcqtlxJqNs3iU_ORHBpl4aqcCj0ErmeTd1IuHS3MNRxC1nYK1jMRoVex52YZZk3b1gUgAkuraO5ywY_nkxbb?width=975&amp;amp;height=1024&amp;amp;cropmode=none&quot; alt=&quot;image-20201204142044506&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;另一个例子&quot;&gt;另一个例子&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;见 &lt;a href=&quot;http://www.scs.stanford.edu/20wi-cs140/notes/type.c&quot;&gt;type.c (stanford.edu)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;open 作为一个黑箱、接口返回状态码，便于调用与高级程序使用&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;保护&quot;&gt;保护&lt;/h2&gt;

&lt;h3 id=&quot;一个-cpu-保护的例子&quot;&gt;一个 CPU 保护的例子&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;内核时钟每 10ms 刷新一次检查权限&lt;/li&gt;
  &lt;li&gt;内核每次中断后由程序重新抢占&lt;/li&gt;
  &lt;li&gt;这样就避免了 CPU 无限循环&lt;/li&gt;
  &lt;li&gt;坏处是每个程序都很慢（之前提到过）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;###如何破坏计算机&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;把内存占满&lt;/li&gt;
  &lt;li&gt;叉炸弹&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;内存隔离&quot;&gt;内存隔离&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;定义
    &lt;ul&gt;
      &lt;li&gt;地址空间：一个程序占用的所有内存地址&lt;/li&gt;
      &lt;li&gt;虚拟地址：程序所见到的内存地址（即进程地址空间）&lt;/li&gt;
      &lt;li&gt;物理地址：物理的地址（内存）&lt;/li&gt;
      &lt;li&gt;翻译：将虚拟地址映射到物理地址 （页）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;优点：每一个进程都不知道别的进程的地址，因为它们看到的地址是不一样的&lt;/li&gt;
  &lt;li&gt;CPU 负责翻译&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;现代的内存保护&quot;&gt;现代的内存保护&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;CPU允许仅内核虚拟地址&lt;/li&gt;
  &lt;li&gt;CPU允许OS禁用（无效化）特定的虚拟地址
    &lt;ul&gt;
      &lt;li&gt;虚拟内存总大于物理内存&lt;/li&gt;
      &lt;li&gt;停止内存越界&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;因此便于优化（内存管理器只管理虚拟地址）&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;资源分配与调度&quot;&gt;资源分配与调度&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;一方面把所有资源给一个程序会让他跑得很快，但另一方面其它程序被中断了，会影响执行。
    &lt;ul&gt;
      &lt;li&gt;例如同一个任务在连续的物理内存上的访问速度很快&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;多线程对资源的利用率很高
    &lt;ul&gt;
      &lt;li&gt;AMD yes&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;通常情况下，少部分的任务是特别消耗运算的，其它任务加起来所占用的内存却很大。（二八效应？）
    &lt;ul&gt;
      &lt;li&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Canarypwn</name></author><category term="Technology" /><category term="CS140" /><summary type="html">Intro</summary></entry><entry><title type="html">使用 GitHub Actions 与 Cloudflare 重构博客体验</title><link href="https://aaaab3n.moe/technology/2020/11/28/github-and-cloudflare.html" rel="alternate" type="text/html" title="使用 GitHub Actions 与 Cloudflare 重构博客体验" /><published>2020-11-28T02:01:59+00:00</published><updated>2020-11-28T02:01:59+00:00</updated><id>https://aaaab3n.moe/technology/2020/11/28/github-and-cloudflare</id><content type="html" xml:base="https://aaaab3n.moe/technology/2020/11/28/github-and-cloudflare.html">&lt;h2 id=&quot;caution&quot;&gt;Caution&lt;/h2&gt;

&lt;p&gt;Due to rendering problem, some characters can’t be displayed correctly by markdown ( &lt;strong&gt;such as $&lt;/strong&gt; ). Read source code instead.&lt;/p&gt;

&lt;h2 id=&quot;为什么不自己-host-服务&quot;&gt;为什么不自己 Host 服务&lt;/h2&gt;

&lt;p&gt;正如 苏卡卡 在  &lt;a href=&quot;https://blog.skk.moe/post/cloud-and-sla/&quot;&gt; 谈谈云服务和 SLA &lt;/a&gt;  中说的，在线云服务的 SLA 相比自己 Host 一个服务，可用性有很明显的提升。而且 GitHub Pages, GitHub Actions 和 Cloudflare 都是有免费额度的，对于个人用户完全够用。相信很多人之前买了 VPS，之后因为各种原因没有做好备份导致写了很久的博客文章丢失的事情，GitHub 的存储服务也能解决这个问题。&lt;/p&gt;

&lt;h2 id=&quot;为什么不用之前的-netlify&quot;&gt;为什么不用之前的 Netlify&lt;/h2&gt;

&lt;p&gt;之前笔者是使用 Netlify 来构建博客的， Netlify 可以 Hook 住某个 GitHub repo， 在有 commit 的时候自动拉下来。它有一个 ubuntu 的虚拟环境，根据写的指令自动构建完后 Host 网页。 Netlify 还有自带的 CDN 和 DNS解析服务，在刚开始搭建博客的时候， Netlify 用的是 Digital Ocean 的 CDN，它的日本节点对于大陆网络的友好程度是要高于 Cloudflare 的。&lt;/p&gt;

&lt;p&gt;但最近 Netlify 推出了更加严格的限制，限制了网页流量和编译所用的时长。我一个月后去看发现欠费了 7 美元。再加上现在 DO 的 CDN 对大陆的友好程度直线下降， Cloudflare 在声誉和基础设施上的投入上也使我非常青睐。一个大一同学的项目  &lt;a href=&quot;https://github.com/Spedoske/CloudflareScanner&quot;&gt;Spedoske/CloudflareScanner (github.com)&lt;/a&gt; 可以扫描出最快的 Cloudflare 节点，有着很多用途。&lt;/p&gt;

&lt;h2 id=&quot;github-actions&quot;&gt;GitHub Actions&lt;/h2&gt;

&lt;p&gt;简单来说，GitHub Actions 可以提供一台无法直接访问的 Azure ，通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;.github/workflows/*.yml&lt;/code&gt; 执行所写的指令。 Azure 可以提供 Ubuntu 、 Windows 等环境。另一位同学的项目 &lt;a href=&quot;https://github.com/KiruyaMomochi/RediveExtract&quot;&gt;KiruyaMomochi/RediveExtract (github.com)&lt;/a&gt; 就是使用 GitHub Actions 抓取公主链接的新版本然后解包剧情推送到 Telegram Bot 上。甚至有人用 GitHub Actions 来自动构建 OpenWRT （&lt;a href=&quot;https://github.com/Hyy2001X/AutoBuild-Actions&quot;&gt;Hyy2001X/AutoBuild-Actions: 使用 Github Actions 编译 Openwrt&lt;/a&gt;）。本文主要介绍了三种框架的 GitHub Actions 。&lt;/p&gt;

&lt;h3 id=&quot;jekyll&quot;&gt;Jekyll&lt;/h3&gt;

&lt;p&gt;Jekyll 在官方 &lt;a href=&quot;https://jekyllrb.com/docs/continuous-integration/github-actions/&quot;&gt;GitHub Actions &lt;/a&gt; 提供了 GitHub Actions。不过由于我的依赖和官方的 bundler 版本冲突，所以选择自己写。&lt;/p&gt;

&lt;p&gt;该文件见  &lt;a href=&quot;https://github.com/Nyovelt/jekyll-theme-mdui/tree/master/.github/workflows&quot;&gt;jekyll-theme-mdui/.github/workflows at master · Nyovelt/jekyll-theme-mdui&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;name: Build and deploy Jekyll site to GitHub Pages

on:
  push:
    branches:
      - master
  workflow_dispatch:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;首先的 name 是整个 GitHub Action 的描述&lt;/li&gt;
  &lt;li&gt;on 代表何时触发 Action
    &lt;ul&gt;
      &lt;li&gt;push 代表当某个分支有提交时触发 push&lt;/li&gt;
      &lt;li&gt;workflow_dispatch 提供了网页手动触发&lt;/li&gt;
      &lt;li&gt;此外还有每按一次 star 触发 和 schedule 的按时触发&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jobs:
  github-pages:
    runs-on: ubuntu-latest
    steps:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;表示使用 ubuntu-latest 作为构建机的操作系统，用 docker 的同学应该很熟悉&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;      # Use GitHub Actions' cache to shorten build times and decrease load on servers
      - uses: actions/cache@v1
        with:
          path: vendor/bundle
          key: $-gems-$
          restore-keys: |
            $-gems-
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;由于 &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle install&lt;/code&gt;执行过程时间非常长，所以添加缓存来节省时间和公共资源。该代码块的意思是以每一个 Gemfile.lock 创建一次缓存，这样可以节省安装相应依赖所用的时间&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install gem git -y
          sudo gem install bundler:1.17.2 jekyll

      - name: Build jekyll
        run: |
          cd $
          bundle install
          bundle exec jekyll build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;这两个就和正常 ubuntu 的运行命令一样了。 其中 &lt;code class=&quot;highlighter-rouge&quot;&gt;$&lt;/code&gt;是 GitHub Actions 的环境变量，表示了 repo 所在的目录&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;      - name: Invoke Deployment
        with:
          ACCESS_TOKEN: $
          BRANCH: gh-pages
          FOLDER: _site
        uses: JamesIves/github-pages-deploy-action@3.2.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;这一段代码块是将特定文件夹 &lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt;内容推送到 &lt;code class=&quot;highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt;分支。其中 &lt;code class=&quot;highlighter-rouge&quot;&gt;secrets.ACCESS_TOKEN&lt;/code&gt;可以在 上文 Jekyll 的文档中找到描述，是在 secrets 里创建一个键值对，来记录你的 GitHub Token 。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;hugo&quot;&gt;Hugo&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;name: Build and deploy Hugo site to GitHub Pages

on:
  push:
    branches:
      - master
  workflow_dispatch:
  

jobs:
  github-pages:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          cd ~
          wget https://github.com/gohugoio/hugo/releases/download/v0.78.2/hugo_0.78.2_Linux-64bit.deb
          sudo dpkg -i hugo*.deb
          hugo version
           
      - name: Build Hugo
        run: |
          cd $
          hugo
          
      - name: Invoke Deployment
        with:
          ACCESS_TOKEN: $
          BRANCH: gh-pages
          FOLDER: public
        uses: JamesIves/github-pages-deploy-action@3.2.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;默认的 Ubuntu 是 bionic 版本，因此它的软件源不是最新的 （比如 apt 的 Hugo 版本是 0.4 因此不能正常编译）&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;node&quot;&gt;Node&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/amphineko/atomicneko/blob/master/.github/workflows/deploy-pages.yml&quot;&gt;atomicneko/deploy-pages.yml at master · amphineko/atomicneko (github.com)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;name: Deploy to GitHub Pages

on:
  push:
    branches: 
      - master
      - deploy-action
  workflow_dispatch:
  

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        persist-credentials: false

    - name: Invoke Webpack build
      run: |
        npm install .
        npm run build

    - name: Invoke Deployment
      with:
        ACCESS_TOKEN: $
        BRANCH: gh-pages
        FOLDER: dist
      uses: JamesIves/github-pages-deploy-action@3.2.1

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;github-pages--cloudflare&quot;&gt;GitHub Pages + Cloudflare&lt;/h2&gt;

&lt;p&gt;这个部分会介绍的简略一些，因为网上同类文档很多，而且操作很简单。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://sn3301files.storage.live.com/y4mW-R9hfnuB-2UE2bDy4bqoWFMDe08UL1prmOjxt4HU23XIsTj6OMY595LcnBBv7UsmPabV16ys7ZaGxIf7Qm8JUb4FKKwnE3Hy_pCkEe9Cdl24YMt28ecm5BOaMT9NpoK4mDBDKEsxljhCa7Z7uJcHUtB9VUkJ3xMzrXPDJrGgFG7GE6vJLdvmcxOZrC-_pG4?width=1024&amp;amp;height=442&amp;amp;cropmode=none&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;总之， Cloudflare 作为 CDN 提供了对网页 （也就是 GitHub Pages）的缓存，同时提供了很多安全选项，比如强制性的 https 和 TLS 。&lt;/p&gt;

&lt;p&gt;在从 Netlify 切换到了这一套新的架构以后，访问体验有了肉眼可见的提升。&lt;/p&gt;</content><author><name>Canarypwn</name></author><category term="Technology" /><category term="Cloudflare" /><category term="Blog" /><category term="Website" /><summary type="html">Caution</summary></entry><entry><title type="html">明清历史中的国家自信与国家自觉</title><link href="https://aaaab3n.moe/literature/2020/10/08/lunwen.html" rel="alternate" type="text/html" title="明清历史中的国家自信与国家自觉" /><published>2020-10-08T02:01:59+00:00</published><updated>2020-10-08T02:01:59+00:00</updated><id>https://aaaab3n.moe/literature/2020/10/08/lunwen</id><content type="html" xml:base="https://aaaab3n.moe/literature/2020/10/08/lunwen.html">&lt;h1 id=&quot;明清历史中的国家自信与国家自觉&quot;&gt;明清历史中的国家自信与国家自觉&lt;/h1&gt;

&lt;h2 id=&quot;近代史的分划与明清历史&quot;&gt;近代史的分划与明清历史&lt;/h2&gt;

&lt;p&gt;人们传统地将历史分为三个阶段，分别是古代，中代和近代。在中国，公认的近代史是从1840年第一次鸦片战争到1949年中华人民共和国成立。笔者认为，近代史与近代史之前——也就是明清史有着不可分割的联系。明清是是中国历史上最后一个由汉族建立的封建王朝，在这两代王朝期间，中外都发生了不同于以往的进步与改革，这些进步与改革如何，又怎样的对近代史产生了影响是本论文探讨的重点。要探讨什么是近代史，了解近代与古代的不同是必要的事。笔者准备以外交与文化来发现明清历史中现代性的一部分。明清作为历史的转折点，一方面将中古代王朝中存在的部分发挥到了极致，另一方面完成了对于传统概念的重新解释，使得明清具有了现代性。在明清中，本文将重点放在了清朝历史，因为清朝更接近现代，同时清朝作为一个非汉人统治的王朝，也更具代表性与研究型。同时，在明清朝，&lt;strong&gt;国民对于国家的认同有了多次不同的诠释&lt;/strong&gt;，这些诠释将成为线索，引出近代历史。&lt;/p&gt;

&lt;h2 id=&quot;文艺复兴&quot;&gt;文艺复兴&lt;/h2&gt;

&lt;p&gt;“文艺复兴”是西方创造的词汇，是一种反应社会进步的文化，所以从这样的性质说，中国也发生过多次文艺复兴。在文艺一词中，包含着哲学、文学等精神文化，也包含着其背后社会组织的进步。&lt;/p&gt;

&lt;h3 id=&quot;清代的文化&quot;&gt;清代的文化&lt;/h3&gt;

&lt;p&gt;清代作为一个由满人统治的，从女真发源的王朝，但是从康熙即位后，之后诸帝皆修习汉族学术。这一点不但与元朝君主轻视汉文化大不相同，与历代汉王朝相比都毫不逊色。此外，清代的文化更多的受到了欧洲文化的影响。17世纪是欧洲文艺复兴的时代，传教士们将欧洲的成熟的文化带来了中国，给中国社会带来了剧烈的影响。从中国的学术可见，自明清交替，违心的新学衰落，而实证的考据学兴起。&lt;/p&gt;

&lt;p&gt;在过去中西方文化的交流往往产生有益的结果，比如永乐大帝凭借的大炮的优势击败了蒙古。明朝通过传教士的力量创造了红衣大炮。满洲的清朝也得到过一门红衣大炮，得以在进攻明朝时使用。之后平定准格尔和与俄国的战争中火炮也起了很大作用。&lt;/p&gt;

&lt;p&gt;在乾隆时代，中国的东西方文化交流达到了一个平衡。乾隆帝让传教士在北京西郊的圆明园内仿制了凡尔赛宫。而在欧洲，各国王侯都在宫中设中国宫或者中国室，来展示中国的陶瓷藏品。&lt;/p&gt;

&lt;p&gt;在明清的历史中，因为和西方的交流，社会、技术和文化都得到了进步。之后的近代东西方交流将会进一步加剧，东西方的联系以及其对文化的有利影响和融合是现代性的体现。&lt;/p&gt;

&lt;h2 id=&quot;世界交流与产业革命&quot;&gt;世界交流与产业革命&lt;/h2&gt;

&lt;p&gt;欧洲从古代开始就一直在西亚文化的影响下发展自己的文化，同样的在明清时期中原王朝也开始与世界接触并吸收他们的文化。&lt;/p&gt;

&lt;h3 id=&quot;郑和与朝贡&quot;&gt;郑和与朝贡&lt;/h3&gt;

&lt;p&gt;蒙古的西征带来了一次中西融合，在这次融合中，伊斯兰航海术传到了中国。郑和用西方的伊斯兰航海术七下西洋，最远甚至到达了莫桑比克的贝拉港。在这次远航中，郑和劝说南海诸国朝贡，宣扬国威。在后来，日本对朝鲜，美国的佩里舰队对日本也做过了同样的事情。所以，郑和下西洋的动机除了寻找建文帝的任务外，既是为了营造“万国来朝、四夷咸服“的气势,也是中央集权政府打击东南沿海民间贸易和海上流民的措施。虽然这样的歧视看上去只是虚名，&lt;strong&gt;但是这内化成为了国家信仰的一部分&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;笔者认为，明朝乃至清朝统治者心中应该依旧留存着对于元朝的世界地图。例如，永乐帝登基后就想办法征服越南，虽然在其死后由于安南的分离主义者而重获独立。此外，明朝还推行锁国政策，拒绝外国自发进行朝贡，同时严禁本国人民前往外国贸易。即使是朝贡国，朝贡规模也受到了严格的限制。而中国并非地大物博无所不缺，对国外贸易实际上有着极大的需求。在明朝国力衰退后兴起的倭寇战争就是这种矛盾的体现。所以朝贡与其实质上“天朝上国”的对外政策都是从自己的立场出发，而强加到别国头上。这样维护出来的形象最终&lt;strong&gt;内化成了天朝上国的形象，成为了国家信仰，并遗留到了清朝&lt;/strong&gt;。&lt;/p&gt;

&lt;h3 id=&quot;清朝的单边贸易与鸦片战争&quot;&gt;清朝的单边贸易与鸦片战争&lt;/h3&gt;

&lt;p&gt;虽然清朝的对外贸易相比明朝有所放松，在完成对台湾的征服后在广东进行单边贸易。清朝对贸易有着诸多限制，例如礼仪和交易场所。在这种不公平的交易中，英国难以将产业化的纺织品通过倾销的方式卖给天气炎热的广东，因此常年贸易逆差。但此时英国正在进行产业革命，需要大量资金，于是英国在印度种植鸦片，卖入中国。&lt;/p&gt;

&lt;p&gt;此时英国的产业革命如火如荼，相邻的法国的政治大革命也在鼎盛，物质和组织结构的革命推翻了中古代的根本，很快，这样的冲击也到了清朝。白银开始外流，于是清政府进行了第一次鸦片战争。产业革命的巨大成功使得英国可以让汽船驶入广州湾。锁国主义和自由贸易主义的战争使得清政府门户大开，天朝上国的形象不复存在。经济不景气使得清末叛乱频出。经济和国家信仰的下行使得清朝，&lt;strong&gt;一个闭关锁国的民族国家变得开放&lt;/strong&gt;，原先的国家信仰瓦解了，国民和统治阶级们急需找到一个新的信仰来维持清王朝的延续。如何对待西方列强成为了清末政治的核心，一直留到近代。&lt;/p&gt;

&lt;h2 id=&quot;统一与觉醒&quot;&gt;统一与觉醒&lt;/h2&gt;

&lt;h3 id=&quot;清朝的衰亡与国家主义的觉醒&quot;&gt;清朝的衰亡与国家主义的觉醒&lt;/h3&gt;

&lt;p&gt;当对外交涉成为清朝的政治中心问题的时候，清朝新设了总理衙门，由亲王任总理大臣，以平等的礼仪对待外国公使。清政府任用了“洋务派”中的新知识份子进行改革政治，即“同治中兴”。但是古老传统的旧体制并不会轻易瓦解，新旧冲突的时代仍在继续。同治中兴的中兴二字表现了当时知识分子的评价，表现了一种&lt;strong&gt;重新获得的国家自信&lt;/strong&gt;。太平天国与不平等条约使新兴阶级的阶级自觉得到了觉醒，&lt;strong&gt;清朝平定内乱后产生了国家与国家自觉&lt;/strong&gt;。这样的国家自觉也遗留到了近代的各种救亡图存运动中。&lt;/p&gt;

&lt;p&gt;但是传统的清王朝无法阻挡新时代的革命。中法战争和甲午战争的失败使得国家自信受到了进一步打击。其原因是陆海军尚未成为完全的国民军，例如南洋舰队的大臣在甲午海战后要求日本归还一艘在战争中被俘虏的战舰，理由是这艘战舰被误认为属于北洋舰队。国家的概念得到了一定程度的解体。&lt;strong&gt;私人武装&lt;/strong&gt;的概念直到中华名族抗日统一战线的形成导致的民族觉醒才有所消解。&lt;/p&gt;

&lt;p&gt;外界和内部的压迫使得国民中民族主义的兴起。义和团运动就是民族主义的产物，这是一次大规模的排外运动，民族主义具有现代性。&lt;strong&gt;近代民族主义&lt;/strong&gt;的序幕被拉开。&lt;/p&gt;

&lt;p&gt;随着国民对于清王朝失望情绪的累积，新兴的知识分子意识到打倒清朝是国家主义的捷径。国家主义本质是国民通过契约法律授权政府管理国家事物。于此产生了&lt;strong&gt;以革命为目的的民族主义&lt;/strong&gt;。例如孙文就有着打倒清朝，成就中国的名族主义的初期理想。&lt;strong&gt;国家主义的觉醒是近代史的高潮，它最终推翻了旧帝国本身。&lt;/strong&gt;清王朝留下的丰厚遗产使得中华大地上的各种私有化武装有能力争夺产生下一个国家的机会，各种思想也在中华大地上生根发芽。这样的历史一直持续到了近代史的结束。&lt;/p&gt;</content><author><name>Canarypwn</name></author><category term="Literature" /><category term="EDU" /><summary type="html">明清历史中的国家自信与国家自觉</summary></entry><entry><title type="html">GeekPie DevOps 招新宣讲</title><link href="https://aaaab3n.moe/technology/2020/09/13/fresh.html" rel="alternate" type="text/html" title="GeekPie DevOps 招新宣讲" /><published>2020-09-13T02:01:59+00:00</published><updated>2020-09-13T02:01:59+00:00</updated><id>https://aaaab3n.moe/technology/2020/09/13/fresh</id><content type="html" xml:base="https://aaaab3n.moe/technology/2020/09/13/fresh.html">&lt;h1 id=&quot;引言&quot;&gt;引言&lt;/h1&gt;

&lt;p&gt;作为一个存在了多年的，人数最多的计算机社团，我们同时运行着很多的服务。那么我们是如何确保这些服务是可用的，我们社团开发的工作流又是怎样的。&lt;/p&gt;

&lt;h1 id=&quot;服务器&quot;&gt;服务器&lt;/h1&gt;

&lt;p&gt;作为一个经费充裕的社团，我们在不同的地方有着不同的服务器。如何管理这些服务器，如何方便开发者简单的部署服务是Ops的工作。就目前来说，我们在上海有三台阿里云服务器，两台香港的服务器，一台青云的服务器，还有两台在校内。其中在校内的两台中的一台还没有公网ip。把这些服务器方便稳定的链接起来是运维工作的基础。我们目前使用的是Tinc VPN，它是一种mesh，当每一个新节点加入的时候，它会自动连上其他所有的服务器，这样我们的每台服务器都能与其他服务器互相连通。&lt;/p&gt;

&lt;h1 id=&quot;工作流&quot;&gt;工作流&lt;/h1&gt;

&lt;p&gt;开发者需要的是一个快速稳定的部署环境。运维需要一个安全便捷的管理环境。所以我们所有的服务都是基于docker的。简单的来说，docker是为了克服不同的系统环境存在的，比如同样的代码在你的电脑上跑不一定能在我的电脑上跑，docker的思想就是将你的环境和代码打包在一起，在你分享代码的时候同时包含的你跑代码的环境。Github是代码分享与管理平台，方便每个人贡献自己的代码，也方便团队进行协作。社团在Github上有一个自己的Orgnization，开发者要做的就是将docker上传到github上。剩下的全都会较为自动化完成部署。&lt;/p&gt;

&lt;h1 id=&quot;技能&quot;&gt;技能&lt;/h1&gt;

&lt;p&gt;作为Ops，你需要对Linux系统熟悉，因为我们大部分的服务器都是跑着Ubuntu系统的。此外我们也很环境对网络有了解的人加入我们，因为目前的组网方式依旧不够完善。如果你会写代码，我们会更加欢迎。&lt;/p&gt;

&lt;h1 id=&quot;devs&quot;&gt;Devs&lt;/h1&gt;

&lt;p&gt;我们既是服务的管理者又是服务的开发者。作为一个立于上科大的社团，为上科大的师生服务也是我们的使命之一。作为一个新的社团，我们更倾向于使用现代，主流，新颖的技术和工具进行开发。&lt;/p&gt;

&lt;p&gt;比如镜像源网站是用vue3.0和vuetify框架进行开发的，并使用nginx作为服务器。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.murez.site/devops-2020geekpie/&quot;&gt;https://blog.murez.site/devops-2020geekpie/&lt;/a&gt;&lt;/p&gt;</content><author><name>Canarypwn</name></author><category term="Technology" /><category term="EDU" /><summary type="html">引言</summary></entry><entry><title type="html">“万民管理万民”——国家的必然与终极</title><link href="https://aaaab3n.moe/literature/2020/08/31/Leviathan.html" rel="alternate" type="text/html" title="“万民管理万民”——国家的必然与终极" /><published>2020-08-31T02:01:59+00:00</published><updated>2020-08-31T02:01:59+00:00</updated><id>https://aaaab3n.moe/literature/2020/08/31/Leviathan</id><content type="html" xml:base="https://aaaab3n.moe/literature/2020/08/31/Leviathan.html">&lt;h1 id=&quot;万民管理万民国家的必然与终极&quot;&gt;“万民管理万民”——国家的必然与终极&lt;/h1&gt;

&lt;h2 id=&quot;引言&quot;&gt;引言&lt;/h2&gt;

&lt;p&gt;作者通过唯物的观点，在第二部分“论国家“，描述了自然状态中人们不幸的生活与渴望和平和安定生活的共同要求，于是出于人的理性，人们相互间同意订立契约，放弃各人的自然权利，把它托付给某一个人或一个由多人组成的集体，这个人或集体能把大家的意志化为一个意志，能把大家的人格统一为一个人格；大家则服从他的意志，服从他的判断。&lt;/p&gt;

&lt;p&gt;如同”罗马人民管理罗马民众“一样，S.P.Q.R 作为一个由罗马人民赋予权利的共和国，它管理着罗马民众，发动战争，进行建设。而罗马人民和罗马民众是同一批人，他们既是 S.P.Q.R. 的建立者又是一部分维护者又是被统治者。历史上，罗马共和国与罗马帝国在这个基础上进行解构，在古代和今天，都成为了一种文化，认同和意识形态。&lt;/p&gt;

&lt;p&gt;本文主要就“万民管理万民”为核心，论述霍布斯如何论述人们放弃个人的自然权利，来组成一个集体；这个集体如何通过契约与自然法的形式，使得人们服从；人们又是出于何种特性需要组成一个集体；这个集体为什么会存在，它为什么是最终形式。&lt;/p&gt;

&lt;h2 id=&quot;人性与自然状态&quot;&gt;人性与自然状态&lt;/h2&gt;
&lt;h3 id=&quot;自然状态即战争状态&quot;&gt;自然状态即战争状态&lt;/h3&gt;
&lt;p&gt;霍布斯认为，任何人之间是大致平等的，假如所欲求的东西是固定有限的，那么任何人之间会产生一种类似零和游戏的竞争关系。在这种关系之中，最为稳定和保全的办法就是先发制人，即双方以付出生命和自由的代价，让他人被征服，被控制。而控制他人的过程，被叫做统治。往往，这种过程伴随着暴力。&lt;/p&gt;

&lt;p&gt;出于欲求的天性，霍布斯认为在自然状态下这种争斗是普遍存在的。人们会为了求利而竞争，为了保全自身人们会猜疑对方，为了荣誉人们会去追名逐利从而侵犯他人。也就是说，只要人们还存在着欲望，并且有限的物质无法满足人类的欲望时，在自然状态下各方面都平衡的人们会为了各自的欲望去争斗。霍布斯这样说，“在没有一个共同权力使大家慑服的时候，人们便处在所谓的战争状态之下。”&lt;/p&gt;

&lt;p&gt;在战争状态下，人们很难得到一个好的生存状态。在战争状态下，由于争斗的普遍存在以及其暴力的过程与形成控制的结果，因此在这个较长的时代中，每个人都伴随着恐惧。同时，由于”征服“这一选项的存在使得公平交易受到了妨碍，人们会受到不公正的待遇。因此，理智的存在使得人们需要寻求一种出路来寻求生存与和平。霍布斯将这种和平条件称为自然律。&lt;em&gt;自然律是理性所发现的戒条或一般法则。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;尽管霍布斯将自然律的发现归咎于理性，但非理性在其中起到的作用也无法忽略。人们生而就有的同理心和爱心使得人们寻求一种出路，也使得人们放弃了自身的权利。自然律的产生不仅仅是因为放弃短期利益而追求长期利益，“己所不欲勿施于人”这样的同理心也应当起到了一定的作用。&lt;/p&gt;

&lt;h2 id=&quot;契约与自然法&quot;&gt;契约与自然法&lt;/h2&gt;

&lt;h3 id=&quot;契约的建立与权利的扬弃&quot;&gt;契约的建立与权利的扬弃&lt;/h3&gt;

&lt;p&gt;为了避免进入恶性的不稳定的战争状态，理性的我们选择利用一切可能的办法来保卫我们自身。这种方法就是权利的让渡与停使。当双方争夺同一样事物时，一方可以出于生命与安全的考虑而将获得该事物的权利让渡给另一方。这一方通过使用了“让渡权利”而获得了自己”使用权利“的自由与生命的保全，另一方得到了”得到事物的权利“的自由。这是一种权利的出让。而契约就是权利的互相转让。也就是说为了避免进入战争状态，契约被发明了出来。&lt;/p&gt;

&lt;p&gt;人们为了保全自身，因此会广泛的和他人定立契约。通过契约，权利得到了交换。通过放弃权利从而得到生存的权利，通过放弃选择权的自由从而得到”自愿放弃“的自由。由此，契约的定立使人们摆脱了自然状态。但是契约本身不具备有效性。从最基本的来说，契约不过是言辞或者纸张。若要脱离自然状态，&lt;strong&gt;人们需要确保契约的有效性&lt;/strong&gt;。&lt;em&gt;”所订契约必履行。“&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;自然律与国家&quot;&gt;自然律与国家&lt;/h3&gt;

&lt;p&gt;霍布斯的法更多的不是法律，而是自然律。为了确定契约的履行，需要一种力量来使人们不去满足自身的利益、荣誉。即，有一种组织形态使得人们将自我放在了次位。那么这种组织形态一定是超越所有人的。霍布斯认为，人们可以将自己的权力交由一个组织，由这个组织”通过多数的意见把大家的一致化为一个意志的多人组成的集体。”而这本身也是一种契约。于是国家可以由此定义，即一群人签订一个契约，放弃自身先天占有的，对事物的占有权，并将权利移交给一个“多数人意志”的集体。互相与互相定立信约，以便使它能按其认为有利于大家的和平与共同防卫的方式运用全体的力量和手段的一个人格。&lt;/p&gt;

&lt;p&gt;这种信约就是自然律，这个意志就是国家。对于个人来说，个人舍弃了自己的权利来获得了非战争状态的和平，从而使自身得到了保全，这是契约。为了使契约得到保全，人们放弃了对于与事物契约的占有，将其移交给了国家意志。&lt;strong&gt;确定契约履行的方式是违约成本的增加&lt;/strong&gt;。在一个”多数人意志“的集体中，个人占有的自由与资源不值一提，国家衍生出了庞大的附属机构来确保契约的履行。&lt;strong&gt;看似人们放弃了权利和自由，但是因为国家和法的存在，人身安全得到了保全&lt;/strong&gt;，人们的权利和契约得到了履行，自然状态被遗弃了。&lt;/p&gt;

&lt;h2 id=&quot;国家意志&quot;&gt;国家意志&lt;/h2&gt;

&lt;p&gt;国家是一个意志的集体，是一种人格。但是在历史上，国家很容易联想到君王和帝国，霍布斯这里的国家不是一个实体，而是一种概念和意志。人们将权利托付给国家意志，而由君王和统治阶级进行意志的执行。公务员们，定立的法律，以及国家的一切，都是国家意志的产物。对于国家意志，人民由先天服从的义务，因为这是人民互相定立的契约，而没有毁约的可能。人们看似被君王统治着，实则是被自己所定立的契约所统治。&lt;strong&gt;国家意志的定立就是为了确保不陷入自然状态而督促着各种契约的执行。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;国家与终极&quot;&gt;国家与终极&lt;/h2&gt;

&lt;h3 id=&quot;国家是社会组织的终极状态&quot;&gt;国家是社会组织的终极状态&lt;/h3&gt;

&lt;p&gt;“万民管理万民”，即由人民的共同意志国家来通过保障契约运行的形式维护者人们不落入自然状态。因此为了脱离自然状态，理性驱使着人们建立如国家一样的组织。在历史上，不论是游牧还是帝国，都遵循着这样的发展规律。同时，国家可以维护自身。通过保障契约的运行，以及所衍生出的一系列行政体系，大部分人仅为自我考虑的原子性在国家面前做出了让步，只要国家能继续维持契约的运行，那么国家的合法身份，即多数人意志的集合也能继续维持下去。因此在当前状况下，&lt;strong&gt;凭借个人无法消解国家&lt;/strong&gt;，对国家的消解依旧需要大多数人的意志。国家的裂解方法是国家这种组织（而不是某一个具体的国家）没有办法聚拢大多数人的意志了。这种情况我认为是存在的，即“大多数人违约”，由大多数人的意志不再支持国家组织的运行，国家的作用与身份得到了消解。然而，人们无法找到一个更好的集体来使自己免于落入自然状态；同时，解散国家的过程中大多数人的意志依旧在发挥一种集体性的作用，也就是&lt;strong&gt;大多数人毁约&lt;/strong&gt;，将自己托付给国家的权利收回，从国家的本质上说，这是解散国家的唯一方式。但是在国家意志面前，大多数人统一意志的行动本身就难以存在。像建立国家那样的“集体自发”式的订立契约的基础已经不存在了，因为之前的基础是为了避免进入自然状态而为了生存的理性考量，在面对国家时，如果国家没有发挥其应有的功能，大部分的意志得不到贯彻，可以重新集合大多数人的意志，寻求建立国家的新途径，从而使国家本身的属性（行政，司法等）得到&lt;strong&gt;升级&lt;/strong&gt;，让国家的形态更加稳固。当国家能发挥其作用时，出于落入自然状态的恐惧，大多数人出于理性的考量不会集体违约。随着国家机器的运转，民众参与国家事物的部分也越来越少，议员负责监督和提议，法官负责贯彻法律，公务员帮助着国家的运转，士兵们负责国家安全，国家的概念再一次超越了，”多数人的意志“并不是可数的人，而是国家中的每一个人，是&lt;strong&gt;不可数的&lt;/strong&gt;。因此，统一每一个人的意志，再次对国家这个超越每一个人的概念进行消解是非常困难的一件事。在历史上虽然有多次尝试，但至今都没有给出一个答案，由国家维持的和平与公平作为它创始的目的得到了完整的落实，国家也超越了”多数人的意志“的概念而成为了一个自动运行自动修补的高效机器。&lt;/p&gt;</content><author><name>Canarypwn</name></author><category term="Literature" /><category term="EDU" /><summary type="html">“万民管理万民”——国家的必然与终极</summary></entry><entry><title type="html">修复由误操作导致的分区表重建问题</title><link href="https://aaaab3n.moe/technology/2020/08/21/fstab.html" rel="alternate" type="text/html" title="修复由误操作导致的分区表重建问题" /><published>2020-08-21T02:01:59+00:00</published><updated>2020-08-21T02:01:59+00:00</updated><id>https://aaaab3n.moe/technology/2020/08/21/fstab</id><content type="html" xml:base="https://aaaab3n.moe/technology/2020/08/21/fstab.html">&lt;script src=&quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/x-mathjax-config&quot;&gt; MathJax.Hub.Config({ tex2jax: { skipTags: ['script', 'noscript', 'style', 'textarea', 'pre'], inlineMath: [['$','$']] } }); &lt;/script&gt;

&lt;h1 id=&quot;起因&quot;&gt;起因&lt;/h1&gt;

&lt;p&gt;在8月初的时候，我接下了学校信息学院某实验室集群助管的工作，上任第一天的工作就是配置管理环境。集群的架构大致是这样，一共是约30台服务器，在上面跑 docker , 映射 ssh 端口，分派给不同的用户使用。除此以外还有两台大容量NFS服务器用于用户存储数据。&lt;/p&gt;

&lt;p&gt;我使用了 Portainer.io 进行多机器的 docker 管理。同时用了一个 shell 来完成其它机器运行 portainer.io - agent 以及挂载 nfs 磁盘的操作。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Nyovelt/DevOps/tree/master/%E5%9C%A8%E5%90%8C%E4%B8%80%E5%AF%86%E7%A0%81%E7%9A%84%E4%B8%8D%E5%90%8C%E4%B8%BB%E6%9C%BA%E4%B8%8A%E6%89%A7%E8%A1%8C%E7%9B%B8%E5%90%8C%E5%91%BD%E4%BB%A4&quot;&gt;脚本&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;error&quot;&gt;ERROR&lt;/h1&gt;

&lt;p&gt;在某一次，由于 NFS 磁盘掉线导致 docker 卡在了 create 的状态上。没有在意，在 nfs 服务器重新上线后重启服务器，发现 docker 掉线了。不过机器足够多，因此把原先的 docker 放在了新的机器上面，这台服务器的问题就被搁置了。&lt;/p&gt;

&lt;p&gt;昨天去 SHLUG 的时候见到了 &lt;a href=&quot;https://github.com/PhotonQuantum&quot;&gt;@LightQuantum&lt;/a&gt; ，顺便和他说起了这件事情。我们都觉得很奇怪，于是进行排查，发现整个文件系统都被写保护了。最后发现在 &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/fstab&lt;/code&gt; 中是这么写的&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;10.15.??.??:/mnt/data /mount nfs  0 0
10.15.??.??:/mnt/data /mount1 nfs  0 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;于是想起来脚本中的这一行&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'helloworld'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; aaaa
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;只有一个 ‘&amp;gt;’ 是覆盖文件并写入，因此我&lt;strong&gt;抹掉了整个分区表&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;还好大部分服务都在内存中，修复起来稍微容易一些。除了之前被重启过的和为了试验当场重启的。&lt;/p&gt;

&lt;p&gt;于是后面两台服务器，首先挂载分区&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; mount &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; remount,rw /dev/sda3 /
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;对于其它机器以及这两台服务器，更改其分区文件&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/dev/sda3 / ext4 defaults,relatime 0 1
/dev/sda1 /boot ext4 defaults,relatime 0 0
/dev/sda2 none swap defaults 0 0
/dev/sdb1 /data ext4 defaults,relatime 0 0
10.15.??.??:/mnt/data /mount nfs defaults 0 0
10.15.??.??:/mnt/data /mount1 nfs defaults 0 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;加入 defaults 属性也许会让 nfs 运行的更好一些。&lt;/p&gt;

&lt;p&gt;这样就修复完成了。&lt;/p&gt;</content><author><name>Canarypwn</name></author><category term="Technology" /><category term="Linux" /><summary type="html"></summary></entry><entry><title type="html">我为什么对新生说’‘快逃(‘’</title><link href="https://aaaab3n.moe/life/2020/07/23/Run-away-from-shanghaitech-%E5%89%AF%E6%9C%AC.html" rel="alternate" type="text/html" title="我为什么对新生说''快逃(''" /><published>2020-07-23T02:01:59+00:00</published><updated>2020-07-23T02:01:59+00:00</updated><id>https://aaaab3n.moe/life/2020/07/23/Run-away-from-shanghaitech%20-%20%E5%89%AF%E6%9C%AC</id><content type="html" xml:base="https://aaaab3n.moe/life/2020/07/23/Run-away-from-shanghaitech-%E5%89%AF%E6%9C%AC.html">&lt;script src=&quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/x-mathjax-config&quot;&gt; MathJax.Hub.Config({ tex2jax: { skipTags: ['script', 'noscript', 'style', 'textarea', 'pre'], inlineMath: [['$','$']] } }); &lt;/script&gt;

&lt;p&gt;写于上海高考出分周&lt;/p&gt;

&lt;p&gt;对于一个已经度过大学一年的人来说，填志愿和高考的过程依旧给我留下了很大的创伤，以至于到今年高考出分的时候，我还在梦中交了一次高考白卷。作为一个经历过填志愿，也听说过很多故事的人，我觉得还是有一些经验可以分享的。&lt;/p&gt;

&lt;p&gt;或许从大学之后多次梦见高考的创伤来看，高考和填志愿的过程已经于我是一种象征的，摆脱不了的时光了。我也希望通过此文，能够对我过去的经历进行一次重新建构。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;声明：本文并不是一篇招生宣传，如果你读了这篇文章后选择去了上科大，南科大或是其他学校，那笔者一定特别开心。&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;快逃&quot;&gt;快逃&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;https://rpbciq.sn.files.1drv.com/y4mXeIg06I5qFnj3-pfGlOjPnfCMgMd4_Yn2Uykz7mh8JvRxJwrpWDVhO73w7X9KW0-jGldlVrPhEhGVsunD4xKs8rPTvbI17fji8qkB5MfjLhNUks5Cn4g0AAQGeVWNxrfsUcjBHdmv7MFJM9hIBYQognRe4NnHB_Ej8xYpbOa08IYVzWeaW4tZX8L5HaNjY-R_xgPyh6tVafxxm8HmddJKw?width=591&amp;amp;height=1280&amp;amp;cropmode=none&quot; alt=&quot;Run away&quot; /&gt;&lt;/p&gt;

&lt;p&gt;记得在7月18号的时候，并介在新读写的专栏中做了一场&lt;a href=&quot;https://mp.weixin.qq.com/s/i8L2BbvmbfCw4_YptUOqcg&quot;&gt;一个小时的分享&lt;/a&gt;，接下来的一个小时便是清华大学计算机与金融专业的宣讲会。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://rpbviq.sn.files.1drv.com/y4mWNddP63MstN1q2CSKpzEZvO2zJpJDECc3BrfHewKUTvzGuZ0moWRVbrsqwcxZZjNJHiMhvqlYxDOOfLYqwgWOYo8L5omFHfUmrjWKuoMMIiSJHQVe32sf9x5S_OUiIJ_ZAiaRcFcRk-94o27ZVTlw5R4PYMUe4ofZgTa3q3wPiXd4OC0dP_jQiSSBMlLVVKLMKmOFvWiBTzYLU5PLPuwLQ?width=858&amp;amp;height=1679&amp;amp;cropmode=none&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;前一个小时的直播是放弃复旦去HKU的并介，并且他还成功的从新闻系转到了数学系。后一个小时的直播是具备了清华，计算机，金融这三个光环的新专业。可想而知，在机构和家长眼中，这样的新专业有多少分量。计算机专业是清华收分数一数二的专业，加上金融二字，这样的专业估计是要让举子们望尘莫及了。&lt;/p&gt;

&lt;h1 id=&quot;我是怎么选专业的&quot;&gt;我是怎么选专业的&lt;/h1&gt;

&lt;p&gt;我在&lt;a href=&quot;https://aaaab3n.co/life/2020/04/15/computer-science&quot;&gt;这篇文章&lt;/a&gt;中也许提到过。我从小就对计算机感兴趣。同时，上海的市重点一般都会培养学生的职业规划能力。比如我所在的上大附中在初三放假的15天后就召集了我们布置作业，其中一个就是做职业规划量表。高中的时候还会联系企业，让我们去参观。据我所知，南洋模范也会做类似的量表。&lt;/p&gt;

&lt;p&gt;所以对于我来说，目标是很清晰的：我想学计算机。当然，高考志愿还有滑档的说法，所以我选择了物理作为备选。当高考出分后，我的位次并不是很靠前。由于家庭话语权和其它复杂的原因，由我母上来主导我高考志愿的填写。所以除了提前批选了上科大以外，第一版志愿是从高分到低分填，因为母上对志愿填报了理解仅来自于辅导机构。可想而知，这一版志愿在我看来是极不满意的。( 把24个志愿全部填满2333，在我的要求下，她把最后一位改成了杭电( ACM强校 ))。为此，我们还有过争论。当然，这也有一部分是观念的关系，比如我当时还不知天高地厚的敢在零志愿填清北，而她极力反对，原因是“志愿表被别人看到是会笑话你的”。分歧由此可见。&lt;/p&gt;

&lt;p&gt;于是，最后我们达成了一定的妥协。在较高的分数段上，我将我喜欢的学校，喜欢的专业，按照喜欢程度一个个排列下来。而低分段则由母上自由发挥。&lt;/p&gt;

&lt;p&gt;最后，算上&lt;strong&gt;加分&lt;/strong&gt;，以高出分数线9分进入上海科技大学。顺便说一下，上海科技大学（在2020年之前）都是满足第一志愿招生的，这一点非常友好。&lt;/p&gt;

&lt;p&gt;备注：在填志愿之前，笔者已经取得了上科大加分。&lt;/p&gt;

&lt;h1 id=&quot;为什么要说快逃&quot;&gt;为什么要说快逃&lt;/h1&gt;

&lt;p&gt;这里仅以上科大举例，因为可能窝在上科大，环境稍微闭塞了些，潜移默化的觉得我们比较先进吧。毕竟和其它学校交流实在太少了。&lt;/p&gt;

&lt;p&gt;上科大是一所非常特殊的学校。祂没有985光环的加持，本科毕业后的出路有限。在大一期间，我们经历了严格的查重，全英语方言上课。我身边就有同学认为上科大不是一所好学校，因此早早的选择了考研的出路，准备四年后选择一条更好的道路。&lt;/p&gt;

&lt;p&gt;对于计算机科学来说上科大是梦幻的。就像我开放日与学校的时候碰到的 Ingress玩家们聊天的时候得知的， 我作为一个计算机科学家是绝对不会拒绝一所大一就把解释器作为作业的学校的。（后来发现，其它作业也很有挑战性，也很有趣）。但是，对于其它同学，甚至包括不把计算机当作未来所从事事业的非信院同学来说，用 python 写解释器是一件很有难度的事情。其中还包括期末极其严格的，毫无水分的查重。这些事情可能在国内其它的常规高校是遇不到的，所以我认为，这才是&lt;strong&gt;正确且有效&lt;/strong&gt;的计算机科学教育。&lt;/p&gt;

&lt;p&gt;所以我想说什么呢，上科大对于我来说有祂独特的魅力所在，而你要感知到祂的魅力，你需要了解很多的信息，让自己上大学前就成为一名准计算机科学家。你需要知道的是你未来要做什么，你是不是要改变这个世界什么。这样你才足够有能力从上科大吸取你想要的资源，这种资源甚至不止局限于上科大。曾经微信公众号里推送过一篇毕业生的文章，是《上科大满足了我的所有幻想》，社团旁边的学长立刻评论说，那这个人的想象力也太匮乏了。&lt;/p&gt;

&lt;p&gt;所以大学到底是做什么的呢，&lt;a href=&quot;https://twitter.com/DelaYukiScarlet&quot;&gt;雪&lt;/a&gt;曾经在&lt;a href=&quot;https://github.com/Chi-Task-Force/Chi-Bot-Story&quot;&gt;迟先生们&lt;/a&gt;晒GPA的时候指出，在大学，如果不光光为了保研和转专业，GPA之外的部分也很重要（虽然雪好像只是高中生），经历和项目也占了很多重量。&lt;a href=&quot;http://www.houxiaodi.com/assets/misc/manual.pdf&quot;&gt;上海交通大学生存手册&lt;/a&gt;也是这么指出的。总之，大学&lt;strong&gt;不一定&lt;/strong&gt;是为了最后的那张毕业证，也&lt;strong&gt;不一定&lt;/strong&gt;是为了最后找到的那份工作。有时候很多无用的事情才是在大学这段最自由的时间中应该去做的。所以，一定要明白大学应该是什么样的，也一定要明白自己期望的大学生活是什么样的。&lt;/p&gt;

&lt;p&gt;所以我们常常会对想要报考上科大的同学们说，&lt;strong&gt;快逃！&lt;/strong&gt;就我而言，如果你真的了解了很多信息，还被我们的一面之词所劝退的话，那可能真的不适合这所学校2333。&lt;/p&gt;

&lt;h1 id=&quot;所以我想说什么呢&quot;&gt;所以我想说什么呢&lt;/h1&gt;

&lt;p&gt;正如存在主义告诉我们的那要，也许你的高考分数已经确定了，也许你去不了985，去不了211，去不了一本，去不了大专。但最好一定要清楚自己要做什么，想做什么。可能你三年都没有想清楚，没关系，大学四年和今后的人生中一定是能想清楚的。但如果你稍微考虑过一点的话，那再填志愿的过程中就用上这些想法吧。虽然有些事情已经无法改变，但你可以选择未来去哪个城市，从事哪种职业，身边的是什么样的人。&lt;/p&gt;

&lt;p&gt;正如并介拒绝复旦转而去HKU，从新闻系跨界到了数学系，只因一句“我想做科学家啊”。身边的人不甘心屈居现在的学校，转而考插班生，又在备考过程中了解到了自己真正的归宿。生化环材只要喜欢就不一定是坑专业，计算机和金融最后也会变成社畜。遵循父母的安排和从高到低谈志愿也不是一件坏事。人生中的很多决定就像这样，没有绝对的正确答案。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://sfvxrq.sn.files.1drv.com/y4m4xUrwH3YqFrQB_dswHC-r_EE6MARb_F7VDv9K3-7q3lpFyITsUbA8bOB5cuxSZfkTFEFdgQEUTk681PoaPyJbbwLIaebThB0j93Uc-O3mI6AoACd6cfGwUqVpUlSjHLn9mrurcxxLyb6QfT8ivMb9mXDQFg4CqQRh1oZ28Z3u2LvNRXaJuxdwP4MWD8j5_OAdopK4CyN1MhnSHP3IlxTIQ?width=684&amp;amp;height=1436&amp;amp;cropmode=none&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;后记&quot;&gt;后记&lt;/h1&gt;

&lt;p&gt;感谢朋友们的建议与鼓励。后续的改进意见还包括：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;就 家长对孩子志愿和未来的控制 与 孩子对自我未来的追求 两点分别展开批判与辩护
    &lt;ul&gt;
      &lt;li&gt;可以查看这篇草稿 (&lt;a href=&quot;https://1drv.ms/w/s!Au3reWMu7K2CgpliZgHDzSEE_q3CGw?e=vOQs7t&quot;&gt;https://1drv.ms/w/s!Au3reWMu7K2CgpliZgHDzSEE_q3CGw?e=vOQs7t&lt;/a&gt;, 密码 2333)&lt;/li&gt;
      &lt;li&gt;内容是关于法哲学原理中的家庭&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;南瓜灯博士的评论大概就是我想说的&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://5c8kzw.sn.files.1drv.com/y4mD-IcC20PzF5WLdgp4csjEvGNkkXZwWm2UoPjZ8qUd1XhBrudj-XcqQICxEY36sMOqispko5pNiVMk1OFsKYhMdEqXwUZJ1dj6LDGPUTQxHaQkBp9WUuoLD9gw1IzvyiZAhcW7w9TqdSg8-nob7JPgCCv8RHTGvOc__-bY52HHAFlV2k59leP1cn4kdbiBCHtQUpM9LdKC94M-weVJC-7gQ?width=828&amp;amp;height=702&amp;amp;cropmode=none&quot; alt=&quot;评论&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Canarypwn</name></author><category term="Life" /><category term="Life" /><summary type="html"></summary></entry><entry><title type="html">PIGEON OJ 配置指南（评卷机）</title><link href="https://aaaab3n.moe/technology/2020/07/07/pigeon-oj-config.html" rel="alternate" type="text/html" title="PIGEON OJ 配置指南（评卷机）" /><published>2020-07-07T02:00:59+00:00</published><updated>2020-07-07T02:00:59+00:00</updated><id>https://aaaab3n.moe/technology/2020/07/07/pigeon-oj-config</id><content type="html" xml:base="https://aaaab3n.moe/technology/2020/07/07/pigeon-oj-config.html">&lt;script src=&quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/x-mathjax-config&quot;&gt; MathJax.Hub.Config({ tex2jax: { skipTags: ['script', 'noscript', 'style', 'textarea', 'pre'], inlineMath: [['$','$']] } }); &lt;/script&gt;

&lt;h1 id=&quot;pigeon-oj&quot;&gt;Pigeon OJ&lt;/h1&gt;

&lt;p&gt;Pigeon OJ 是由上海科技大学 GeekPie 社团开发的一个基于 Docker 和 Gitlab 的多文件在线评测系统。&lt;/p&gt;

&lt;p&gt;在上学期的 CS100 后，该 OJ 已经尘封了一个学期了。 在下个学期的 SI100B 中，该 OJ 也会给新来的 20 届同学使用。在暑学期中， 该 OJ 还要为 专硕 的项目服务。&lt;/p&gt;

&lt;p&gt;OJ 的评卷系统是通过一个 scheduler 通过 TLS 连接 Docker API 调用 Docker 进行评卷。之前的评卷机在 CS100 课程结束后就被学校收回了。 所以现在我需要为其添加一个新的评卷机 ( &lt;strong&gt;Judger&lt;/strong&gt; )&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://sozp6g.sn.files.1drv.com/y4m0CQRdGXS0RMOHS1FtC6sGvzQujWvZTDq5IT22jkUMLz594GgYa0fFjHPJDtQGppr8rJNFdjir93uz_rFgRGQOtOd8ZGxvfR2nn0s_txH7Jym_OdFBfJSfj7HxOyRy9aQ1h8pRmZuJJflirEwW74yJUjS8lgv4wCQrA5IeL0M5Ivy_Fc55lRfaG3ErtTGFGNPLGFoXCKetdggEmybzw_ipg?width=2736&amp;amp;height=1847&amp;amp;cropmode=none&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;# Docker Remote API TLS 认证&lt;/p&gt;

&lt;p&gt;参考链接: &lt;a href=&quot;https://www.jianshu.com/p/a1bdc96b4163&quot;&gt;https://www.jianshu.com/p/a1bdc96b4163&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这里是我的配置:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;openssl genrsa &lt;span class=&quot;nt&quot;&gt;-aes256&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; ca-key.pem 4096
openssl req &lt;span class=&quot;nt&quot;&gt;-new&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-x509&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-days&lt;/span&gt; 365 &lt;span class=&quot;nt&quot;&gt;-key&lt;/span&gt; ca-key.pem &lt;span class=&quot;nt&quot;&gt;-sha256&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; ca.pem
openssl genrsa &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; server-key.pem 4096
openssl req &lt;span class=&quot;nt&quot;&gt;-subj&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/CN={你的域名}&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-sha256&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-new&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-key&lt;/span&gt; server-key.pem &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; server.csr
&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;subjectAltName &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; DNS:&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;你的域名&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; extfile.cnf
openssl x509 &lt;span class=&quot;nt&quot;&gt;-req&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-days&lt;/span&gt; 365 &lt;span class=&quot;nt&quot;&gt;-sha256&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-in&lt;/span&gt; server.csr &lt;span class=&quot;nt&quot;&gt;-CA&lt;/span&gt; ca.pem &lt;span class=&quot;nt&quot;&gt;-CAkey&lt;/span&gt; ca-key.pem &lt;span class=&quot;nt&quot;&gt;-CAcreateserial&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; server-cert.pem &lt;span class=&quot;nt&quot;&gt;-extfile&lt;/span&gt; extfile.cnf
openssl genrsa &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; key.pem 4096
openssl req &lt;span class=&quot;nt&quot;&gt;-subj&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/CN=client'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-new&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-key&lt;/span&gt; key.pem &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; client.csr
&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;extendedKeyUsage &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; clientAuth &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; extfile.cnf
openssl x509 &lt;span class=&quot;nt&quot;&gt;-req&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-days&lt;/span&gt; 365 &lt;span class=&quot;nt&quot;&gt;-sha256&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-in&lt;/span&gt; client.csr &lt;span class=&quot;nt&quot;&gt;-CA&lt;/span&gt; ca.pem &lt;span class=&quot;nt&quot;&gt;-CAkey&lt;/span&gt; ca-key.pem &lt;span class=&quot;nt&quot;&gt;-CAcreateserial&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; cert.pem &lt;span class=&quot;nt&quot;&gt;-extfile&lt;/span&gt; extfile.cnf
&lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; client.csr server.csr
&lt;span class=&quot;nb&quot;&gt;chmod&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; 0400 ca-key.pem key.pem server-key.pem
&lt;span class=&quot;nb&quot;&gt;chmod&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; 0444 ca.pem server-cert.pem cert.pem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;其中， &lt;code class=&quot;highlighter-rouge&quot;&gt;{你的域名}&lt;/code&gt; 替换为你的域名  (e.g. aaaab3n.oj.geekpie.club)，或者直接使用 ip 。&lt;/p&gt;

&lt;p&gt;之后会生成 ca-key.pem key.pem server-key.pem ca.pem server-cert.pem cert.pem&lt;/p&gt;

&lt;p&gt;我创建了  ~/.docker 目录并把 &lt;code class=&quot;highlighter-rouge&quot;&gt;ca.pem&lt;/code&gt;  &lt;code class=&quot;highlighter-rouge&quot;&gt;server-cert.pem&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;server-key.pem&lt;/code&gt; 放入。&lt;/p&gt;

&lt;p&gt;之后编辑 /lib/systemd/system/docker.service&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;nv&quot;&gt;ExecStart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/bin/dockerd &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; unix:///var/run/docker.sock &lt;span class=&quot;nt&quot;&gt;-D&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; tcp://0.0.0.0:443 &lt;span class=&quot;nt&quot;&gt;--tlsverify&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--tlscacert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/home/canary/.docker/ca.pem &lt;span class=&quot;nt&quot;&gt;--tlscert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/home/canary/.docker/server-cert.pem &lt;span class=&quot;nt&quot;&gt;--tlskey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/home/canary/.docker/server-key.pem


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这里有一个小坑是生成证书的时候我的本地时间没有调整为标准时间，因此之后 TLS 握手时出错。&lt;/p&gt;

&lt;h2 id=&quot;测试&quot;&gt;测试&lt;/h2&gt;

&lt;p&gt;将  &lt;code class=&quot;highlighter-rouge&quot;&gt;cert.pem&lt;/code&gt;  &lt;code class=&quot;highlighter-rouge&quot;&gt;key.pem&lt;/code&gt;  &lt;code class=&quot;highlighter-rouge&quot;&gt;ca.pem&lt;/code&gt; 传输到目标机器，运行命令  &lt;code class=&quot;highlighter-rouge&quot;&gt;curl https://{你的域名 / IP }:443/info --cert ./cert.pem --key ./key.pem --cacert ./ca.pem&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://sezc6g.sn.files.1drv.com/y4muK2AUHw-sGPOIck-hxy9MEfJV6iDi5ZzhDpOq6MRo0jpA_uYr-5PWuHZepntLGS0Ro94_60ot7lZ5PMqLLEulK352GavemVCQLgoWUokLhr0QfkmNvPI68DtlWAhAzVIf9iz2kn4SOV45JnzULAy0gWXQ8uEJlwPfZrSvm8hH8LAizKf7pxLqPvS5Lwe1wpoaRik3rB6EMLqB99w6fDLjQ?width=1534&amp;amp;height=832&amp;amp;cropmode=none&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;oj-配置&quot;&gt;OJ 配置&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;https://sozw6g.sn.files.1drv.com/y4mSwmlVCBWE4cU8f7R3lCgVQmT6K3GdFiXP_LHTyyilo9EoNCuE2FaopSN6Yklwl0p3KQK-YjgjgTRXXg54UxAdn64PgAwIwYmGZl6TWBbZQcMwW5e_uqwG1KlGADYMyIJX5uEmqJPn9l38AP0qQHwgOlspIEsNrTimCHygACUenx6-kURcG-ellxS6SR0cJo-iDd6I_vNSAb2Cdh5pQb9zQ?width=2736&amp;amp;height=1813&amp;amp;cropmode=none&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Client Key -&amp;gt; key.pem&lt;/li&gt;
  &lt;li&gt;Client Cert -&amp;gt; cert.pem&lt;/li&gt;
  &lt;li&gt;Cert CA      -&amp;gt; ca.pem&lt;/li&gt;
  &lt;li&gt;MAx job     -&amp;gt; CPU逻辑处理器数&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;结合之前&lt;a href=&quot;https://aaaab3n.moe/technology/2020/07/07/618-workstation-setup-guide&quot;&gt;一篇文章&lt;/a&gt;，我将3900X处理器分配了12个线程给OJ使用。&lt;/p&gt;

&lt;h1 id=&quot;使用感受&quot;&gt;使用感受&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;https://sozu6g.sn.files.1drv.com/y4m1SdXpuAu0otJfNePqn920LfGswI1w1nQTAK_9E9tC_zmjjzshwIlSszWUK9qBWszVdYRU6vP22426OpNWdipN0FT_Rzu2H85qgV1c5GsuddP9YzVMYqvdk6EOB5mzeO05Al8NvtL3PGydUBW3_z5V6TbnP1XRrJWaG2utwz8_7dtCt6CtoTjFfJyV8xPs0RKsF3W9gpAmBiPeN4EVHWoUw?width=2026&amp;amp;height=1188&amp;amp;cropmode=none&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;就感觉到快，有催人AC的意思&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Canarypwn</name></author><category term="Technology" /><category term="Technology" /><summary type="html"></summary></entry><entry><title type="html">618电脑指北</title><link href="https://aaaab3n.moe/technology/2020/07/07/618-workstation-setup-guide.html" rel="alternate" type="text/html" title="618电脑指北" /><published>2020-07-07T01:00:59+00:00</published><updated>2020-07-07T01:00:59+00:00</updated><id>https://aaaab3n.moe/technology/2020/07/07/618-workstation-setup-guide</id><content type="html" xml:base="https://aaaab3n.moe/technology/2020/07/07/618-workstation-setup-guide.html">&lt;script src=&quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/x-mathjax-config&quot;&gt; MathJax.Hub.Config({ tex2jax: { skipTags: ['script', 'noscript', 'style', 'textarea', 'pre'], inlineMath: [['$','$']] } }); &lt;/script&gt;

&lt;h1 id=&quot;618&quot;&gt;618&lt;/h1&gt;

&lt;p&gt;由于笔者的笔记本（六代标压i5 + gtx965m）已经跟不上笔者剪辑4K视频和机器学习的需求了。所以在618的时候拿到了预算，有能力购入一台新电脑。&lt;/p&gt;

&lt;p&gt;新电脑旨在追求长期性价比，并且尽量追求边际效应最小化。笔者是计算机科学的学生，因此未来可能会写CUDA，大型编译以及多系统的需求。适逢AMD的Zen2架构和英伟达图灵显卡大降价，因此618可以算是购入电脑的一个好时机。&lt;/p&gt;

&lt;h1 id=&quot;配置&quot;&gt;配置&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://item.jd.com/100006391096.html&quot;&gt;&lt;strong&gt;AMD 锐龙9 3900X 处理器&lt;/strong&gt;&lt;/a&gt;  JD 3286.33&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://item.jd.com/100006445338.html&quot;&gt;华硕（ASUS）PRO WS X570-ACE 主板&lt;/a&gt;&lt;/strong&gt; JD 2890.00&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://item.taobao.com/item.htm?id=601069952968&quot;&gt;32G ECC UDIMM DDR4 3200内存&lt;/a&gt; TAOBAO 1100.00&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;Intel/英特尔P4500 1T SSD U.2&quot;&gt;Intel/英特尔P4500 1T SSD U.2&lt;/a&gt; TAOBAO 787.50&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://item.jd.com/100010498068.html&quot;&gt;&lt;strong&gt;利民（Thermalright） FS140 霜灵 双塔散热器&lt;/strong&gt;&lt;/a&gt; JD 228.00&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://item.jd.com/6757737.html&quot;&gt;美商海盗船 (USCORSAIR) 额定850W RM850x 全模组电脑电源&lt;/a&gt;&lt;/strong&gt; JD 818.17&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://item.jd.com/100007391086.html&quot;&gt;索泰(ZOTAC)RTX2060super霹雳版OC HA&lt;/a&gt;&lt;/strong&gt; JD 2491.00&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://item.jd.com/1842778.html&quot;&gt;先马（SAMA）黑洞 黑色 中塔式机箱&lt;/a&gt;  JD 247.00&lt;/p&gt;

&lt;p&gt;外加一根 U.2连接线&lt;/p&gt;

&lt;p&gt;外加问同学暂时借了块970， 以后会收一块RX580 给 Linux 用&lt;/p&gt;

&lt;p&gt;**ALL 11848 **&lt;/p&gt;

&lt;h2 id=&quot;购买理由&quot;&gt;购买理由&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;3900X 一共拥有 2 个CCD，总共十二核心，二十四线程。 每个CCD分表包含着6个核心和十二个线程 (id: 0-5, 12-17)(i: 6-11, 18-23) ，一共 64M 的三级缓存（虽然跨CCD时延迟会很大）。三级缓存对编译的提升是很大的，同时多核心更利于虚拟机运行。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;华硕（ASUS）PRO WS X570-ACE 主板 是一块工作站主板，特点是支援ECC UDIMM内存， 主板用料较好， 有一个华硕自家的远程管理系统( 类 IPMI )， 共有三条pcie插槽(pcie 3.0 &lt;em&gt;16&lt;/em&gt;+  pcie 3.0 * 8)。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;因为&lt;del&gt;上科大水电网免费&lt;/del&gt;学习需要，所以预计是24*7工作。ECC内存对于系统稳定性的提升是很大的。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;P4500, 英特尔企业级SSD，TLC颗粒， U.2接口&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;利民虽然各种参数上都不如猫扇（例如风压），但口碑较为不错，已经在学校内见到一个有组织的传教团队了（&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;因为会上双卡，所以上了850W的电源&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;目前，&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;由于英伟达在CUDA领域较早的布局和在教育行业的疯狂送卡行为（一个电话连夜免费快递六块V100），AMD目前在机器学习和教育领域的生态已经落后n个身位了&lt;/li&gt;
      &lt;li&gt;机器学习要求显存8G起步（测试结果来自 @ &lt;a href=&quot;https://blog.murez.site/&quot;&gt;murez&lt;/a&gt; 用openai跑历史的期末论文，注，后来他又自己写了一篇）&lt;/li&gt;
      &lt;li&gt;同一个核心的丐版和顶级非公的性能差距不会超过5%&lt;/li&gt;
      &lt;li&gt;CPU更容易成为性能瓶颈&lt;/li&gt;
      &lt;li&gt;2060S是20系列当前性价比较高的一张卡&lt;/li&gt;
      &lt;li&gt;堆料索，售后走京东&lt;/li&gt;
      &lt;li&gt;其它需求可以白嫖学校&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;所以我决定采用索泰的丐版2060S&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;机箱随便买的&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;装机&quot;&gt;装机&lt;/h1&gt;

&lt;p&gt;装机过程将会在BILIBILI见面&lt;/p&gt;

&lt;h1 id=&quot;双系统&quot;&gt;双系统&lt;/h1&gt;

&lt;p&gt;因为学习需求，所以准备采用 host 系统上通过虚拟机来运行若干个 guest 系统。目前主流的方案有 proxmox, unraid, Hyper-V, kvm 等。为了更加开放和性能损失更小，所以选择了用  manjaro  作为 Host  ， 跑 kvm ，再用 pcie passthrough 将显卡直通给 guest 系统的 Windows 。&lt;/p&gt;

&lt;p&gt;所以我将借来的GTX 970 插在了靠近CPU的pcie槽，作为Manjaro的显示输出。将2060S插在了第二根pcie槽，作为将来直通给WIndows的显卡。未来，将显示线插在970上就可以显示Manjaro，将显示线插在2060S就可以显示Windows。非常方便。&lt;/p&gt;

&lt;p&gt;经过简单的配置，Manjaro到了可用的程度。&lt;/p&gt;

&lt;p&gt;这里顺便吐槽一下学校的图书与信息中心，连交大的镜像源都会劫持。因此多了一步添加host。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://soygaq.sn.files.1drv.com/y4mrj9Rj0zOgz0EOIpkpnRyWadifw77lrYkxuQMCoJlSkJEEiLkIJx9MgDtVMuNPx8Xx8tlW4ikTXmvBBGkshjsRuRwU6xGGshcP3rCqHE6i9RL5BZ_W_x2r5IpLoZd8U3ssvWXhFskOPzXTE5jR4cLyE76h1Vk9awfc0MRuBe6JlwYppA6D02qJM6w3Zlm4ugI-gfoJGaYir-hwE4XCv_Bow?width=1306&amp;amp;height=770&amp;amp;cropmode=none&quot; alt=&quot;host&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;检查cpu对虚拟化的支持&quot;&gt;检查CPU对虚拟化的支持&lt;/h2&gt;

&lt;p&gt;可以用该命令来查看CPU是否支持虚拟化&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ LC_ALL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;C lscpu | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;Virtualization
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Output: Virtualization:                  AMD-V
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;通常情况下的CPU都支持虚拟化。注意要在BIOS中开启。对于Intel处理器来说是VT-x，对于AMD处理器来说是AMD-V。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://soyzaq.sn.files.1drv.com/y4mERXPVkaLI_rxTvpcxmmO8pcx3pfK1V42NpBQ8YIizjA2rUH5eN5-ZvxJtG1YXuL2K63E1GALrQnWlEQPZ2f2Dmh-nh3PTQ4oZkeOoPl7bgVXuiVagOpHZVv97SIfJdKj8xVRicV-kzfDVe8tE0nSBJyl9RTlJRRezVwUMk04BhWY2zCq6CLKvGTWocjHb5-wkuWPIf82ze7ggnwcp1QMjQ?width=1017&amp;amp;height=70&amp;amp;cropmode=none&quot; alt=&quot;AMD-V&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;检查内核&quot;&gt;检查内核&lt;/h2&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 这里输出中需要包含 kvm kvm_intel&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;lsmod | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;kvm

&lt;span class=&quot;c&quot;&gt;# 这里输出中需要包含 virtio&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;lsmod | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;virtio

&lt;span class=&quot;c&quot;&gt;# 没有 virtio 时执行&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;modprobe virtio
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;安装所需的软件包&quot;&gt;安装所需的软件包&lt;/h2&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;pacmna &lt;span class=&quot;nt&quot;&gt;-Sy&lt;/span&gt; qemu libvirt ebtables dnsmasq bridge-utils openbsd-netcat
&lt;span class=&quot;c&quot;&gt;# 图形化的管理界面，如果使用带桌面环境的操作系统可选安装。我这里安装&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;pacman &lt;span class=&quot;nt&quot;&gt;-Sy&lt;/span&gt; virt-manager
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;qemu QEMU 软件，提供 qemu-img 等命令&lt;/li&gt;
  &lt;li&gt;libvirt 提供管理虚拟机、存储、网络的功能&lt;/li&gt;
  &lt;li&gt;ebtables 桥接网络管理，用于 default NAT 网络&lt;/li&gt;
  &lt;li&gt;dnsmasq DHCP DNS 服务，用于 default NAT 网络&lt;/li&gt;
  &lt;li&gt;bridge-utils 桥接网络管理，用于桥接网络&lt;/li&gt;
  &lt;li&gt;openbsd-netcat 用于通过 SSH 管理&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;启动服务&quot;&gt;启动服务&lt;/h2&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 启动虚拟机管理后台服务开机自启&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;libvirtd

&lt;span class=&quot;c&quot;&gt;# 启动虚拟机管理后台服务&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl start libvirtd

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;配置显卡直通&quot;&gt;配置显卡直通&lt;/h2&gt;

&lt;p&gt;参考: https://github.com/pavolelsig/passthrough_helper_manjaro&lt;/p&gt;

&lt;p&gt;有视频，也有脚本，挺清晰的。&lt;/p&gt;

&lt;h2 id=&quot;配置虚拟机&quot;&gt;配置虚拟机&lt;/h2&gt;

&lt;p&gt;具体配置和 &lt;em&gt;配置显卡直通&lt;/em&gt; 部分类似不过有几个点需要注意。&lt;/p&gt;

&lt;h2 id=&quot;virtio&quot;&gt;virtio&lt;/h2&gt;

&lt;p&gt;Virtio是一种半虚拟化技术。用VIrtio虚拟的网卡和硬盘，其性能相比Nat和SATA有很大的提升。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.fedoraproject.org/en-US/quick-docs/creating-windows-virtual-machines-using-virtio-drivers/index.html&quot;&gt;https://docs.fedoraproject.org/en-US/quick-docs/creating-windows-virtual-machines-using-virtio-drivers/index.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;首先将硬盘改成virtio总线以增加性能&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qpygaq.sn.files.1drv.com/y4m3_hXpflJqT0pkajwotoQj6Qz5lEBcrcCWrcONnqUMB1lOnjJtArExo8zuBu2ku4jV5TXA3Xcz5bmYTB_SHTEcN76NRuP1E-_yNzHWh5xMY9GZQlmwf12EquK9LaWg8yX9f_LTKS1a-d4y5BDHqlZRInyYzAp_YveBVC_vgDYTM-n2numI83KSt-6pHp2FHpR8hfMnM-mAfvPE3ghhhcmiw?width=1354&amp;amp;height=1118&amp;amp;cropmode=none&quot; alt=&quot;disk&quot; /&gt;&lt;/p&gt;

&lt;p&gt;下载virtio驱动预备&lt;/p&gt;

&lt;p&gt;下载地址页面：&lt;a href=&quot;https://docs.fedoraproject.org/en-US/quick-docs/creating-windows-virtual-machines-using-virtio-drivers/index.html&quot;&gt;https://docs.fedoraproject.org/en-US/quick-docs/creating-windows-virtual-machines-using-virtio-drivers/index.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;如：&lt;a href=&quot;https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/stable-virtio/virtio-win.iso&quot;&gt;https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/stable-virtio/virtio-win.iso&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;创建一个光驱，把驱动放进去&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qpyzaq.sn.files.1drv.com/y4mgdifFkECc5ueB-c39ZB9Vj9bA5KUWmHhAlbNdJhryqULNcGT3TGcrCbwBU9KBUEqUzrCzjH9jfShdhJ3SGV5wEgjglKGCIy1aduC9QtAYBg_mR2Y9OvT97GUxtUnI_DIotSYYZjjdN-XW8Wau-c6T9yRnkomtuFTHnGwlJ8ZNXdmnQzoEHW2uYeDjcXjxP3ZY76Hlp70qnoUio9FzEZsrQ?width=1393&amp;amp;height=1216&amp;amp;cropmode=none&quot; alt=&quot;virtio&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以再做一个准备，把网卡也virtio化&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qpyaaq.sn.files.1drv.com/y4mlDYJ0pV5i40V-rSHks2bU0ZuqdRlpcezP9HIJnqwBXNfBvQoFGpbxRgQF3yARPfS7WF_OOqLV7vV2n0S7kAow-alkZEAVhkEPm7zZMT5qPPw21i1JMI4gdh1iwrWv3Aes2Y2tqx_5_7Ntini0NhS5PgZXJJEte178Mnkh6D8havpBDm8XB0x0izVWttp3Yn4gftyvfrXZ5BBmjlaOxC_zA?width=1448&amp;amp;height=1108&amp;amp;cropmode=none&quot; alt=&quot;网卡&quot; /&gt;&lt;/p&gt;

&lt;p&gt;同时也可以把 usb host 作为 pcie 设备直通给 WIndows ，这样速度和便利性都比较好。但这样 Manjaro 上面就无法访问 usb 设备了。 如果你有多余的 pcie 槽， 可以考虑买一个 pcie 转 usb 的转接卡，某宝大概几十块的样子。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qpybaq.sn.files.1drv.com/y4mdG-2uXMoZzVTFlKHFBKdKgH-Ny1mp4jVG2FSwfHGbUy4Vz2Z58pde2ByW51LlfCiSqk80YVASpGeoY4rYmlBLWnpHEHRg8kdxaaWpHw11dN51vRbljQ4pNPiqI74QqxNuRVyD5Y3CqdwVAEaT31Dv3U1pkrJhH4Ugu5s9nmaNLL7e_hKiQPFLuVJh7qpCC-pO752rWjAmqIetTMoHDXGkg?width=1909&amp;amp;height=1184&amp;amp;cropmode=none&quot; alt=&quot;pcie&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在 windows 安装时，需要加载硬盘驱动，驱动文件夹地址是 &lt;code class=&quot;highlighter-rouge&quot;&gt;E:\viostor\w10\amd64&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;当开机成功后，右键计算机 - 管理 - 设备管理器 ， 然后对于未知的 pcie 设备选择安装驱动。 将驱动文件夹指向 你的光盘即可。 目前我一共装了三个驱动。 分别是硬盘，网卡还有一个virtio ballon，用于CPU的调配。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qpycaq.sn.files.1drv.com/y4mQCc-SSCUuO-wJ3MZpJunX3bt_2UqQ2j_VDKysFNtTeMUENmsLOIYaKv0wnuUS6lHsQcezjlB_eUiziJCOBOcpsyIpi-UbKSyFfmG0DA2ig6B5DT6YP4wLttKpxjYKEd6UufnlChg7iENsoh-LxpLNdBJj5lIphZtZrwGkW0RkjOvEFEJMUphtNTFGJ1QHd49NaJjB0TrmAzR1zmEFfeoig?width=1280&amp;amp;height=819&amp;amp;cropmode=none&quot; alt=&quot;win&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;显卡&quot;&gt;显卡&lt;/h2&gt;

&lt;p&gt;注意开了显卡以后就不用再开虚拟显卡和虚拟显示器了&lt;/p&gt;

&lt;p&gt;英伟达显卡的设置稍有不同。&lt;/p&gt;

&lt;p&gt;要让显卡直通，先要启用iommu，然后让pcie设备使用修改的rom。启动iommu在主板里就可以设置，关键是昨天的那个rom file那一行xml。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://soyaaq.sn.files.1drv.com/y4m9IVjh_nr30EjIjHc_AgdD6kHqmQ4szPoMm9mmoopNgjAsbgTRQ_n9EVRdQjEKdY9oqM3j4UhCTC7zVMMk7ZcLGotRqeljOyOvPTAW5CNaAbtxY4IFaTqWvvxCJlzcx-AiQnyZXL3BGrCUWvLFnSj9OscfXKWbbvndnxOC4gRci4yop5Kf_JH2pR5r5IiqIjTI2syPkCVyjVZRF7ismgGrg?width=1922&amp;amp;height=1310&amp;amp;cropmode=none&quot; alt=&quot;rom&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这是一个显卡的修改bios。首先要获得显卡的原生Bios。&lt;/p&gt;

&lt;p&gt;最简单的办法是在Windows上的GPU-Z上导出Bios&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://soybaq.sn.files.1drv.com/y4mZk-xCzuHAwpTVd08CCbp9znoZH08UsFrksRcgwJfYuAoUJga0-WSCcuyrpYfzIHMvJjJ9C0LP0vYWGQZdi-I1C5VIP2Mr6x2n_89MnVUrM9t0u4DS7RjMAnNn5lM0Vfgnygef3pKX4kMPL_MGbDzDApyBLtNHKM7bSyBn6SH3ulT82Vi11DawuaVSUi3Pbnu-K8qHOupm90ybNKMod7IfQ?width=1280&amp;amp;height=335&amp;amp;cropmode=none&quot; alt=&quot;GPUZ&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果已经装好了 Manjaro，也可以在这个网站找到显卡BIOS&lt;/p&gt;

&lt;p&gt;https://www.techpowerup.com/vgabios/&lt;/p&gt;

&lt;p&gt;然后就是修改ROM了。首先用 WINHEX 或者 HXD 来打开十六进制文件。全文搜索  VGA 。删除 55 AA 的全部内容。前面基本都是 nvflash 啥的信息，这些可能会导致显卡不支持 efi 。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://soycaq.sn.files.1drv.com/y4mZHzeHTw5XRXZpDnGXB0hPiGaQ-n0ztcqxHgr6p4sB8n5TqdbmzeAegrBcz6NFJ0M6IfcJUmXjscSyJvwH-99So5wuih8H9YPP2_3YnfXekAsrgtj6lYKPLz6CM2Jsn9t5gju4ijV4HuT0yb1945jd0dGXV9XRyHDRIESQlQJVUODkkRtVetPsdSJIABQeV31MeDCU1V_bcC3lGkWs77hnQ?width=936&amp;amp;height=582&amp;amp;cropmode=none&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;最后的文件应该是55 AA顶格的&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;​	&lt;img src=&quot;https://soylaq.sn.files.1drv.com/y4mqaWim6oG4HewSk7h-1MOy6GxHfPL4eHX28fxPRmgbCELv7xZ7fb-5aGC2_31AUDj-6pIbhdRavtGP2mq5aFkwAqbzfnM50O1y5bQ07kttLlANTTckXzZBiSmVyTo4YgqcWu8ypDpgG20VbKskDPpjPhWDujsMWARqSXzY6BMM4m6rrMmJLNg2zKxz5VbG3Kn6B2NWtJAGgmYhhMg7uPW1Q?width=901&amp;amp;height=586&amp;amp;cropmode=none&quot; alt=&quot;结果&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后保存为 .rom 文件， 复制到 Manjaro 里面。在虚拟系统管理系统中的xml文件中加一行&amp;lt;rom file = &amp;gt;用于加载显卡bios&lt;/p&gt;

&lt;p&gt;当然事情没有那么简单，NVIDIA屏蔽了消费级显卡的驱动在虚拟机上的加载 (黄氏刀法.JPG) 所以我们需要编辑 kvm 的配置文件来骗过老黄。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://wiki.archlinux.org/index.php/PCI_passthrough_via_OVMF&quot;&gt;https://wiki.archlinux.org/index.php/PCI_passthrough_via_OVMF&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo EDITOR=nano virsh edit win10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;win10替换为你的虚拟机的“域”名字&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://soymaq.sn.files.1drv.com/y4maolZ5cTRWpuof5nWjhUStCbbkPZYoI_n8Pqf56upTKzY-wlYRB2xgWn0VCko78pOfXrX5lbQwNWWvhcRIRcGXDB4tq--DEVpMSr041kzbgXt3x8Esfw7vFLdoUeghvCgDbJNukTy2Bhc2ViCGMBXtF1ApbqYcfnjcFfr3ENq8_fmYDUDO0xnvuzQy_5nRogaWa3TUk1aZqF1ED4MYcs2Og?width=2032&amp;amp;height=1200&amp;amp;cropmode=none&quot; alt=&quot;win10.xml&quot; /&gt;&lt;/p&gt;

&lt;p&gt;添加一个 12 位的 字母数字混合的 vender_id 然后开启 kvm hide&lt;/p&gt;

&lt;p&gt;之后就可以当正常显卡使用了，安装驱动后跑 CUDA 和 3D 项目没有发现明显的问题。&lt;/p&gt;

&lt;h2 id=&quot;cpu&quot;&gt;CPU&lt;/h2&gt;

&lt;p&gt;之前碰到了一个问题是虚拟机可以检测到12个逻辑核心，但从任务管理器中只有两个逻辑核心被用上了。后面发现是CPU的配置问题。&lt;/p&gt;

&lt;p&gt;这是我的设置。因为 3900X 是胶水总线的设计，跨 CCD 的延迟较高。所以我将在一个CCD上的物理核心对应的物理核心分配给虚拟机（也就是0-5 12-17的逻辑核心，3900X 瞬间变成 3600X）。当然你也可以将12核24线程全部分配给虚拟机，这样的话cinebench 可以跑到 7300分 （我做过超频，全核4.3GHZ， 在原生windows上可以跑到7700），但某些应用会出现无响应和推出的情况。所以我暂时还是选择分配一般的核心的方案。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qpydaq.sn.files.1drv.com/y4mdD81pR6OfRe1eqNfr3EWDkboUSWEwl16F0hjzapTCUxC1vUKukYg91Bmn8vhf7QJT-_0Pz2V6GUbiVyITbnOPc7HKaWqt2QOKG7orO91Nu5RPNsW40POvSor7ISuWzTjyzEGfUiniFnZr26o_GsS6VoENVRA0c9mp_oNAQRarSCuda3gPEW1B6XUOo7HyRz5dHSu17VCXxH7RqF-6qvTsg?width=1425&amp;amp;height=1199&amp;amp;cropmode=none&quot; alt=&quot;CPU&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qpyeaq.sn.files.1drv.com/y4mHmMDOVSBk8yKYx25zcMFGyWXooWM39oLzLBydpg2VejI6Ls6b8Eecj5NldnVR_QkRofsDqrOitLMdQQELUYKp8qx5hfk0UjU70VE9wQwKJHZqoi_Clnt7MmxzIIF30mDBV-2g0AVMvugd0g4uPnOscG8zPksye2SLDXiWK2KNJ3YcXaJbngSHdHg3Gkh6EhPbtoDRfd2sHflpayH3_wwxQ?width=1538&amp;amp;height=1230&amp;amp;cropmode=none&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qpyfaq.sn.files.1drv.com/y4mvaCQiu9OjjUdaUw8_FhOgCmA5o2BYc0LSf59Oh-dz0akOgo3aqq2MNpTUBz0Ak8U0lfM5rKYTXWJEOBS2uoxiIsRqNa-Orvfcn25Eu7LxqSiufThws1sld-mGPz_A7Pbsng1GkKv8VWysVsui4KMN8lujM86pJogM2JWncdFeJoag2rvnc3PxGaKoy_-I80z-JfmXnlH9Be0XkdHJoEAzg?width=1445&amp;amp;height=1214&amp;amp;cropmode=none&quot; alt=&quot;CPU&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;参考与致谢&quot;&gt;参考与致谢&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;[https://wiki.archlinux.org/index.php/KVM_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)](https://wiki.archlinux.org/index.php/KVM_(简体中文))&quot;&gt;KVM (简体中文)&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;[https://www.liuzhixiang.com/2019/05/18/Using-KVM-on-Arch%20(Manjaro)/](https://www.liuzhixiang.com/2019/05/18/Using-KVM-on-Arch (Manjaro)/)&quot;&gt;在 Arch Linux (Manjaro) 中使用 KVM 虚拟机&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/pavolelsig/passthrough_helper_manjaro&quot;&gt;[pavolelsig](https://github.com/pavolelsig)/&lt;strong&gt;[passthrough_helper_manjaro](https://github.com/pavolelsig/passthrough_helper_manjaro)&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://luvletter.moe/dual-system-osx-kvm-tutorial/&quot;&gt;Luv Letter - dual-system-osx-kvm-tutorial &lt;/a&gt;  也是 Luv Letter 大佬给出的计算机配置&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;感谢 &lt;a href=&quot;https://nyan.kiwi.cat/&quot;&gt;Kiwi&lt;/a&gt; 提供的帮助&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Canarypwn</name></author><category term="Technology" /><category term="Linux" /><category term="KVM" /><summary type="html"></summary></entry><entry><title type="html">生日</title><link href="https://aaaab3n.moe/life/2020/05/31/birthday2020.html" rel="alternate" type="text/html" title="生日" /><published>2020-05-31T01:00:59+00:00</published><updated>2020-05-31T01:00:59+00:00</updated><id>https://aaaab3n.moe/life/2020/05/31/birthday2020</id><content type="html" xml:base="https://aaaab3n.moe/life/2020/05/31/birthday2020.html">&lt;script src=&quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/x-mathjax-config&quot;&gt; MathJax.Hub.Config({ tex2jax: { skipTags: ['script', 'noscript', 'style', 'textarea', 'pre'], inlineMath: [['$','$']] } }); &lt;/script&gt;

&lt;p&gt;今年的生日或许是我过的最不像生日的一个生日了，没有生日蛋糕，没有长寿面。原本请室友们去吃西餐厅的意大利面的想法也因为赶电路作业而延后了。作为考试周结束的后一天，也许什么都不做才是一种短暂的享受（但我没有做到）。说起来我还未曾有一次在考试之前就知道考试结果不会好的，但这次遇到了。&lt;/p&gt;

&lt;p&gt;凌晨我是在ztr寝室度过的，大家都刚考完了最后一门，yzy请了大家每人一瓶RIO，一起看完了刚刚更新的《辉夜》，看到一半zsy也加入了进来，谈笑风生了一个多小时。在这个时候，我才感觉两周来的压力被缓解了一些。&lt;/p&gt;

&lt;p&gt;各科的DDL依旧会来，暑学期和社会实践也是，锅和自己要做的小项目也是。就像之前决定要拍思修课微电影作为期末作业的时候，更多的是希望创作欲能被表达，而分数反而变得不是那么重要。&lt;/p&gt;

&lt;p&gt;今年的世界也很奇特，世界的两边都发生了一些过于奇幻与疯狂的事情，这些事情或许还会影响到四年以后的去处，以至于我不禁自问，这还是我认识的世界吗。&lt;/p&gt;

&lt;p&gt;有人说生活才是最大的敌人，作为一个自称的理想主义者，大概我的自由和真实不会被生活所磨灭吧。&lt;/p&gt;</content><author><name>Canarypwn</name></author><category term="Life" /><category term="Living" /><summary type="html"></summary></entry></feed>