<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="https://aaaab3n.moe/feed.xml" rel="self" type="application/atom+xml" /><link href="https://aaaab3n.moe/" rel="alternate" type="text/html" /><updated>2021-04-03T05:45:56+00:00</updated><id>https://aaaab3n.moe/feed.xml</id><title type="html">Canarypwn’s Natïve blog</title><subtitle>A life matrix to witness, think and love.</subtitle><author><name>Canarypwn</name></author><entry><title type="html">CA1-MidTerm 梳理</title><link href="https://aaaab3n.moe/edu/2021/04/01/Computer-Architecture-Mid.html" rel="alternate" type="text/html" title="CA1-MidTerm 梳理" /><published>2021-04-01T02:02:59+00:00</published><updated>2021-04-01T02:02:59+00:00</updated><id>https://aaaab3n.moe/edu/2021/04/01/Computer-Architecture-Mid</id><content type="html" xml:base="https://aaaab3n.moe/edu/2021/04/01/Computer-Architecture-Mid.html">&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;

&lt;h3 id=&quot;ca-六大思想&quot;&gt;CA 六大思想&lt;/h3&gt;

&lt;p&gt;1.Abstraction(Layers of Representation/Interpretation)&lt;/p&gt;

&lt;p&gt;2.Moore’s Law (Designing through trends)&lt;/p&gt;

&lt;p&gt;3.Principle of Locality (Memory Hierarchy)&lt;/p&gt;

&lt;p&gt;4.Parallelism&lt;/p&gt;

&lt;p&gt;5.Performance Measurement &amp;amp; Improvement&lt;/p&gt;

&lt;p&gt;6.Dependability via Redundancy&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;其实原版的 &lt;strong&gt;CS61C&lt;/strong&gt;在 21 spring 改成了五大思想(逃)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;numbers&quot;&gt;Numbers&lt;/h2&gt;</content><author><name>Canarypwn</name></author><category term="EDU" /><category term="EDU" /><summary type="html">Intro</summary></entry><entry><title type="html">RISC-V 指令集</title><link href="https://aaaab3n.moe/technology/2021/03/15/risc-v.html" rel="alternate" type="text/html" title="RISC-V 指令集" /><published>2021-03-15T02:02:59+00:00</published><updated>2021-03-15T02:02:59+00:00</updated><id>https://aaaab3n.moe/technology/2021/03/15/risc-v</id><content type="html" xml:base="https://aaaab3n.moe/technology/2021/03/15/risc-v.html">&lt;h2 id=&quot;calculate&quot;&gt;CALCULATE&lt;/h2&gt;

&lt;h3 id=&quot;add&quot;&gt;ADD&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;ADD x1 x0 x0&lt;/code&gt; means  &lt;code class=&quot;highlighter-rouge&quot;&gt;x1 = x0 + x0&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;addi&quot;&gt;ADDI&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;ADDI x1 x0 0x11&lt;/code&gt; means &lt;code class=&quot;highlighter-rouge&quot;&gt;x1 = x0 + 3 (DEC)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;The difference is that ADDI is used for numerical, while ADD is used for registers (or variable we can say)&lt;/li&gt;
  &lt;li&gt;Normally, we can discover &lt;code class=&quot;highlighter-rouge&quot;&gt;ADDI sp sp -32 &lt;/code&gt; at the beginning of the program.  It’s used for allocate memory for the main program. &lt;code class=&quot;highlighter-rouge&quot;&gt;sp&lt;/code&gt; is the pointer of a stack, use to record the runtime memory stack.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;memory&quot;&gt;MEMORY&lt;/h2&gt;

&lt;h3 id=&quot;la&quot;&gt;la&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;la&lt;/code&gt; means &lt;strong&gt;load address&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;la x1 VAL&lt;/code&gt;  VAL’s address is at &lt;code class=&quot;highlighter-rouge&quot;&gt;0x100&lt;/code&gt;, and it’s value is &lt;code class=&quot;highlighter-rouge&quot;&gt;0x11&lt;/code&gt; then &lt;code class=&quot;highlighter-rouge&quot;&gt;x1 = 0x100&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;equal to&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-assembly&quot;&gt;lui t0, SYMBOL[31:12]
addi t0, t0, SYMBOL[11:0]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;lw&quot;&gt;lw&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;lw&lt;/code&gt; means &lt;strong&gt;load word&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;lw x2 VAL&lt;/code&gt; causes &lt;code class=&quot;highlighter-rouge&quot;&gt;x2 = 0x11&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;sw&quot;&gt;sw&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sw&lt;/code&gt; means &lt;strong&gt;save word&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;sw x3 0(x1)&lt;/code&gt; will cause &lt;code class=&quot;highlighter-rouge&quot;&gt;x3 = 0x11&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;x3 = x2&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;li&quot;&gt;li&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;li&lt;/code&gt; means load immediate&lt;/li&gt;
  &lt;li&gt;e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;li a0 VAL&lt;/code&gt; means &lt;code class=&quot;highlighter-rouge&quot;&gt;a0 = VAL = 0x114514 &lt;/code&gt;for example&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;the Point is that &lt;strong&gt;L&lt;/strong&gt; means load, &lt;strong&gt;S&lt;/strong&gt; means save. **a&lt;/td&gt;
      &lt;td&gt;b&lt;/td&gt;
      &lt;td&gt;h&lt;/td&gt;
      &lt;td&gt;w&lt;/td&gt;
      &lt;td&gt;d** means address, byte, half word, word or double word.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;branch&quot;&gt;Branch&lt;/h2&gt;

&lt;h3 id=&quot;beq&quot;&gt;beq&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;beq x1 x2 Label1&lt;/code&gt; means &lt;code class=&quot;highlighter-rouge&quot;&gt;if(x1 == x2) goto Label1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;others&quot;&gt;Others&lt;/h2&gt;

&lt;h3 id=&quot;auipc&quot;&gt;AUIPC&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AUIPC&lt;/code&gt; means add an immediate number to pc&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;auipc x28 65536&lt;/code&gt; means&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Canarypwn</name></author><category term="Technology" /><category term="RISC-V" /><summary type="html">CALCULATE</summary></entry><entry><title type="html">两款SD卡的对比测试</title><link href="https://aaaab3n.moe/technology/2021/02/21/sd-card.html" rel="alternate" type="text/html" title="两款SD卡的对比测试" /><published>2021-02-21T02:02:59+00:00</published><updated>2021-02-21T02:02:59+00:00</updated><id>https://aaaab3n.moe/technology/2021/02/21/sd-card</id><content type="html" xml:base="https://aaaab3n.moe/technology/2021/02/21/sd-card.html">&lt;p&gt;最近由于准备买 &lt;strong&gt;Sony a6100&lt;/strong&gt;，遇到了选购 sd 卡的环节。秉持着鸡蛋不能放在同一个篮子里的理念，以及考虑了UHS-I 最大速度大约在100 m/s 上下封顶，因此购买了市面上两家大厂的不同产品，分别是&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;闪迪至尊极速 SDXC UHS-I 存储卡 64G （附赠闪迪数据修复软件）&lt;/li&gt;
  &lt;li&gt;SAMSUNG PRO PLUS 128G&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;两者购买价格接近，三星的容量是闪迪的一倍，闪迪的读取速度宣传的更快。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dsm01pap002files.storage.live.com/y4mO9zwE4gWdHvbh6FxbS4S6HeDD1n6sYvRy8iWfw5-17c_Mvf4QavqAM3E58FjWyNHdf2thaANIuE1LHO2-xUTFS0UV78H2rEww70YvsAERjrqrH_AJD2mmBMkAvujktF92Pq_JVxqkiz-0h-Y_gJDqjnC-TL_3ph-g3GmlAkFCkTNz7AEUxYEWE8SkDvBI79A?width=1024&amp;amp;height=768&amp;amp;cropmode=none&quot; alt=&quot;telegram-cloud-document-5-6168080165319475641&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dsm01pap002files.storage.live.com/y4mShD50HSlkEIEBJZTEdtE0NTFB7VIkie3thq1biz5pBQz_6kqgn_I36DzHBhWszLEtMRqPHHiuvYJwxpFiyNxd8z2BgfU0x6WZcFbzTaz_gNkp3whzS7N8xr8zVpaGTUu_jJoxnq-SqIZz3TE3pL5ylyQHyYulAGb9gH3M5aolvmInd-_VXjenALeuxjHK8cu?width=1024&amp;amp;height=768&amp;amp;cropmode=none&quot; alt=&quot;telegram-cloud-document-5-6168080165319475642&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dsm01pap002files.storage.live.com/y4msYM_g63n47-C5TQ892o3OsRXU24jmcxzaCawkAo5E4XLHsaOKAEXcIhlGJUWq1C4bDuz26CNdgV8Rk3NH4pZB6_aDzd07hPmvX9vDXl7MVWpifw25Loens1M6vFfVSFSr3NVH69dWqzb9dpp80EIiA1ayNb5uZE4vAtY9SNwQR4sWwBjM8UyrdcWatWEEB21?width=1024&amp;amp;height=768&amp;amp;cropmode=none&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dsm01pap002files.storage.live.com/y4mvKAdHe-11e8P9T02aN6vquwuxcHhu0forbF3xHpwlWq9PaeRC_yGVW_HuIBEuCGAwNk7wTjpi_Yq8_0eJQodNxOGceh5LQlHFHtBp9AWuZ9Cshq-cychwOJHv_8JAQbvLG40xFmWxnkPQ62oYWyHKKTKRTyGvXcoG48OTgasAdHCNH7J2SNL_ZlPuKRHeu3V?width=1024&amp;amp;height=768&amp;amp;cropmode=none&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;而且三星的颜值个人感觉更更高一些&lt;/p&gt;

&lt;h2 id=&quot;评测流程及设备&quot;&gt;评测流程及设备&lt;/h2&gt;

&lt;p&gt;虽然 SD 卡不会像 SSD 一样搭载缓存，但为了严谨起见，采用先测速 - 写文件 -再测速的评测方法。&lt;/p&gt;

&lt;p&gt;评测软件用的是 macos 下用的比较多的 Blackmagic Disk Speed Test。用 Anker 的雷电3扩展坞进行 SD 卡的连接。测试主机是 macbook pro 15 2016。应该不会成为瓶颈。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dsm01pap002files.storage.live.com/y4mmbFghn4qeGtS4OThv2Jf_533o5p2z8YePJOBVZAINS0FjhA3K9G7s2vcqxOJo9-xOZ8my1nV1ZgAn2JkMPVcZn3sz_b5toQCJdoszphUaDubaz907uCZET3gZDUGHLtB4thpk7Ckv3CGOj-IlZhbnAlMAqb_-VsHVQu-pej4oEFNdVt7NNRHbUerILO2eKwP?width=1024&amp;amp;height=824&amp;amp;cropmode=none&quot; alt=&quot;ScreenShot2021-02-21at3.53.07PM&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;三星&quot;&gt;三星&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;未写入状态&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://dsm01pap002files.storage.live.com/y4mv0JhXaPnhH8EJYSoYHBSVXC4mxuwFUTHrwzzzXlV2j1PONVwrvge_T8m1CO_5eZpDjkeONXF4oxckttk-L6YCEGokvn2AIyjP_mONTYjB1sE97hNE7klGVB-fsuGKtAX8yX_QN-2Rgx8Wb3gUoZf-ty4t0nkzwAtTZXf00nKtsFEzvNlRz-W37RHPbiTUWtD?width=732&amp;amp;height=756&amp;amp;cropmode=none&quot; alt=&quot;未写入&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;写入大文件&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://dsm01pap002files.storage.live.com/y4mmbFghn4qeGtS4OThv2Jf_533o5p2z8YePJOBVZAINS0FjhA3K9G7s2vcqxOJo9-xOZ8my1nV1ZgAn2JkMPVcZn3sz_b5toQCJdoszphUaDubaz907uCZET3gZDUGHLtB4thpk7Ckv3CGOj-IlZhbnAlMAqb_-VsHVQu-pej4oEFNdVt7NNRHbUerILO2eKwP?width=1024&amp;amp;height=824&amp;amp;cropmode=none&quot; alt=&quot;ScreenShot2021-02-21at3.51.31PM&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;写入文件后测速&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://dsm01pap002files.storage.live.com/y4mDgDHmtR1kP5n0oCXzKFx42ihbi9XcLG9_pbWPRGf0-pKz_msjqgw1TF8fVptSDb4A-392555xmUIRI9qijukDfmuxANGppcNj6InS6oxEUoQ_wuaPZ4O7oGKwnsscvEjqxkILL2B0xewqzVBH-aC0IGcxs4UU66bdTpiVABdy-DBY06xI6BR8r93DTN_jiwI?width=732&amp;amp;height=756&amp;amp;cropmode=none&quot; alt=&quot;SUMSANG-used&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;闪迪&quot;&gt;闪迪&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;未写入状态&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://dsm01pap002files.storage.live.com/y4mPY_qsPmh19lBnMy2TxB_5cwtPR-G07cgnJ443AkPG6hFz_CZTStKZnh-L1MNlHQ7JsqrQgStp8bz1u4Gb5FcyWLkLOJnicUJVlptmQFc6VLTAaQxZoDrkVq6brAuYXgWqd_VPs_Feuk4wLEhg2Wu9XOglkDB4tDxjrFFKq2wjQgyxSOL5vaKPpoTEyv3dEua?width=732&amp;amp;height=756&amp;amp;cropmode=none&quot; alt=&quot;DiskSpeedTest&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;写入大文件&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://dsm01pap002files.storage.live.com/y4mXPqGZ55K_bTnmqFW0LkkHldH9GW7Fy37JyrC86DRonzJxoGJnTuK0m1wzbET730fJI-j667mCDg7jHhBeBMIFmE2khYovIlOJT2XPT7Oj4_2eSA4SoxTHqK63puc2U0T6LYupY9JM6qyWSNNoSLP4bPEQHPGlFFiJMUnOH16aZ7uWpB61LYX3AUd7kjNY0zv?width=1024&amp;amp;height=824&amp;amp;cropmode=none&quot; alt=&quot;ScreenShot2021-02-21at4.17.20PM&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;写入文件后测速&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://dsm01pap002files.storage.live.com/y4mNSwnelYOOwslN02R8nN-nEfJy1ys8s4QwKv7fz8Iv3LO33TmyHt4Sbi0-Za85XL8H9LP415Ssh6l_aHT8thkOUkV1rtbmHpuzSFjElPuc1KlfRUr17BWsFB7EQ7oWGODQEQkSbUR2Mad90Ix6gsnAOyUbWv3a6GS7kXVS62E3LI-x_7zH8g9eUoD7G0-9yPb?width=732&amp;amp;height=756&amp;amp;cropmode=none&quot; alt=&quot;SANDISK_used&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;结论&quot;&gt;结论&lt;/h2&gt;

&lt;p&gt;可能是扩展坞的支持问题，闪迪并未达到标称的写入速度。因此，我怀疑&lt;strong&gt;在一般环境下达到闪迪的高读入速度也会比较苛刻,理由是在包装盒背面说明了只有兼容设备才能以170M/s的速度读入，而UHS-I标准的最大读取速度为105M/s。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dsm01pap002files.storage.live.com/y4m66HboHrwGu1QLIBvfo3DzpyOi6NZk3iW-JTsywtw_5zq5YoOqkpLlPW8NHWTThsEnUuwRpLINNHrcMFif85RJ2XY1IZXoNw5ERGpcsrO77r9utUmnSrkM7fKPAplsIZiGDGedoMmBOBxmWS6PpEaHV1oInft_r2GWw_5G5x1Af1uaczWnudKHJyFs0dWtTg8?width=4032&amp;amp;height=3024&amp;amp;cropmode=none&quot; alt=&quot;注意说明&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我觉得如果没有更高的要求的话，三星也够用了，因为两者速度在普通设备中相差无几。而且三星和闪迪都是存储大厂与SD卡标准的制定者（另一家是&lt;del&gt;东芝&lt;/del&gt;铠侠），因此在品控上面相差不大。至少相比在更名期的东芝和被镁光抛弃被大陆收购的雷克沙要更有保障。当然，三星更偏向SSD和手机的存储颗粒，而闪迪专注于SD卡。&lt;/p&gt;

&lt;p&gt;理论上的测试无法完全模拟实际使用，当笔者的相机到货后，会酌情对本文进行补充。&lt;/p&gt;</content><author><name>Canarypwn</name></author><category term="Technology" /><category term="camera" /><summary type="html">最近由于准备买 Sony a6100，遇到了选购 sd 卡的环节。秉持着鸡蛋不能放在同一个篮子里的理念，以及考虑了UHS-I 最大速度大约在100 m/s 上下封顶，因此购买了市面上两家大厂的不同产品，分别是</summary></entry><entry><title type="html">CentOS8 下 slurm 的安装配置</title><link href="https://aaaab3n.moe/technology/2021/01/18/centos8-slurm.html" rel="alternate" type="text/html" title="CentOS8 下 slurm 的安装配置" /><published>2021-01-18T02:02:59+00:00</published><updated>2021-01-18T02:02:59+00:00</updated><id>https://aaaab3n.moe/technology/2021/01/18/centos8-slurm</id><content type="html" xml:base="https://aaaab3n.moe/technology/2021/01/18/centos8-slurm.html">&lt;p&gt;&lt;strong&gt;Slurm 任务调度工具&lt;/strong&gt;（前身为&lt;strong&gt;极简Linux资源管理工具&lt;/strong&gt;，英文：&lt;strong&gt;Simple Linux Utility for Resource Management&lt;/strong&gt;，取首字母，简写为&lt;strong&gt;SLURM&lt;/strong&gt;），或 &lt;strong&gt;Slurm&lt;/strong&gt;，是一个用于 Linux 和 Unix 内核系统的&lt;a href=&quot;https://zh.wikipedia.org/wiki/自由及开放源代码软件&quot;&gt;免费、开源&lt;/a&gt;的任务调度工具，被世界范围内的&lt;a href=&quot;https://zh.wikipedia.org/wiki/超级计算机&quot;&gt;超级计算机&lt;/a&gt;和&lt;a href=&quot;https://zh.wikipedia.org/wiki/计算机集群&quot;&gt;计算机群&lt;/a&gt;广泛采用。它提供了三个关键功能。第一，为用户分配一定时间的专享或非专享的资源(计算机节点)，以供用户执行工作。第二，它提供了一个框架，用于启动、执行、监测在节点上运行着的任务(通常是并行的任务，例如 &lt;a href=&quot;https://zh.wikipedia.org/wiki/訊息傳遞介面&quot;&gt;MPI&lt;/a&gt;)，第三，为任务队列合理地分配资源。&lt;/p&gt;

&lt;h2 id=&quot;安装步骤&quot;&gt;安装步骤&lt;/h2&gt;

&lt;p&gt;系统为 &lt;strong&gt;CentOS 8&lt;/strong&gt;, 一共有两个 node 。其中 node1 作为主节点， node2 作为计算节点。&lt;/p&gt;

&lt;h3 id=&quot;设置slurm账户&quot;&gt;设置slurm账户&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 新建用户。-m 为用户创建家目录；-G wheel 将用户添加到 wheel 用户组&lt;/span&gt;
useradd &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-G&lt;/span&gt; wheel slurm
&lt;span class=&quot;c&quot;&gt;# 设置密码&lt;/span&gt;
passwd slurm
&lt;span class=&quot;c&quot;&gt;# 查看账户相关性喜&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;id &lt;/span&gt;slurm
&lt;span class=&quot;c&quot;&gt;# 所有节点的 slurm 组 id 必须一致。否则无法启动成功&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;安装munge&quot;&gt;&lt;strong&gt;安装munge&lt;/strong&gt;&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;epel-release
yum &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;gtk2
yum &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;gtk-devel
yum &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;munge
yum &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;munge-devel
yum &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;hdf5-devel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;手动创建目录,这些目录在munge安装时不会自动创建，分别用于munge的配置、运行、日志等需求。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /etc/munge
&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /var/run/munge
&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /var/lib/munge
&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /var/log/munge
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;修改上述目录的属主为 slurm&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;chown&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-R&lt;/span&gt; slurm:slurm /etc/munge
&lt;span class=&quot;nb&quot;&gt;chown&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-R&lt;/span&gt; slurm:slurm /var/run/munge
&lt;span class=&quot;nb&quot;&gt;chown&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-R&lt;/span&gt; slurm:slurm /var/lib/munge
&lt;span class=&quot;nb&quot;&gt;chown&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-R&lt;/span&gt; slurm:slurm /var/log/munge
&lt;span class=&quot;c&quot;&gt;# 以下看需要，我用到了&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;chown &lt;/span&gt;slurm:slurm /var/run/munge/munge.socket.2.lock
&lt;span class=&quot;nb&quot;&gt;chown &lt;/span&gt;slurm:slurm /var/log/munge/munged.log
&lt;span class=&quot;nb&quot;&gt;chown &lt;/span&gt;slurm:slurm /etc/munge/munge.key
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在 master 主节点上通过&lt;strong&gt;/usr/sbin/create-munge-key&lt;/strong&gt;命令生成 munge 密钥文件，将此文件需要存储在所有节点的 /etc/munge/ 下。&lt;/p&gt;

&lt;p&gt;使用 slurm 账户启动 munge&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;su slurm
munged
ps aux|grep munge
&lt;span class=&quot;c&quot;&gt;# 如果发现之前已经有munge在运行了，kill掉它&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;安装slurm&quot;&gt;&lt;strong&gt;安装slurm&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;去官网可以下载slurm的安装包。地址：https://www.schedmd.com/
安装的方式有好几种，源码编译安装、rpm包安装这两个方式我试过，都可以。这里选择源码编译安装。
将包使用tar命令解压，进入解压目录编译安装。这个过程需要gcc编译器。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;gcc
./configure
make &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt;
make &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 当发现缺少 HDF5 时更改 configure 并重新编译&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# ./configure --with-hdf5=no&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# make -j&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# make install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在 CentOS 下，安装目录在 &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local/lib/slurm&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;配置-slurm&quot;&gt;配置 slurm&lt;/h3&gt;

&lt;p&gt;使用 &lt;a href=&quot;https://slurm.schedmd.com/configurator.html&quot;&gt;Slurm System Configuration Tool (schedmd.com)&lt;/a&gt; 进行文件配置，并且有简单版本&lt;a href=&quot;https://slurm.schedmd.com/configurator.easy.html&quot;&gt;Slurm System Configuration Tool (schedmd.com)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;配置文件在 &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local/etc/slurm.conf&lt;/code&gt; ，运行 &lt;code class=&quot;highlighter-rouge&quot;&gt;slurmctld -c&lt;/code&gt; 显然。&lt;/p&gt;

&lt;p&gt;参考&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;slurm.conf&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;generated&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;configurator&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;easy.html.&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Put&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;your&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;cluster.&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;See&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;the&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;slurm.conf&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;man&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;more&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;information.&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;SlurmctldHost=epyc.node&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#MailProg=/bin/mail&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;MpiDefault=none&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#MpiParams=ports=#-#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ProctrackType=proctrack/cgroup&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ReturnToService=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;SlurmctldPidFile=/var/run/slurmctld.pid&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#SlurmctldPort=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6817&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;SlurmdPidFile=/var/run/slurmd.pid&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#SlurmdPort=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6818&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;SlurmdSpoolDir=/var/spool/slurmd&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;SlurmUser=slurm&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#SlurmdUser=root&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;StateSaveLocation=/var/spool&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;SwitchType=switch/none&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;TaskPlugin=task/affinity&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;TIMERS&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#KillWait=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#MinJobAge=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#SlurmctldTimeout=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;120&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#SlurmdTimeout=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;SCHEDULING&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;SchedulerType=sched/backfill&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;SelectType=select/cons_tres&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;SelectTypeParameters=CR_Core&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;LOGGING&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;AND&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ACCOUNTING&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;AccountingStorageType=accounting_storage/none&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ClusterName=epyc.node&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#JobAcctGatherFrequency=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;JobAcctGatherType=jobacct_gather/none&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#SlurmctldDebug=info&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#SlurmctldLogFile=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#SlurmdDebug=info&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#SlurmdLogFile=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;COMPUTE&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;NODES&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;NodeName=epyc.node&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;NodeAddr=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;10.15&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;89.111&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;CPUs=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;RealMemory=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1031895&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Sockets=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;CoresPerSocket=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ThreadsPerCore=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;State=UNKNOWN&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;NodeName=epyc.node&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;NodeAddr=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;10.15&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;89.112&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;CPUs=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;RealMemory=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1031895&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Sockets=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;CoresPerSocket=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ThreadsPerCore=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;State=UNKNOWN&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;PartitionName=control&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Nodes=epyc.node&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Default=YES&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;MaxTime=INFINITE&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;State=UP&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;PartitionName=computer&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Nodes=epyc.node&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Default=YES&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;MaxTime=INFINITE&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;State=UP····&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;配置完成通过服务启动slurm，控制节点需要执行&lt;code class=&quot;highlighter-rouge&quot;&gt;slurmctld -c&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;slurmd -c&lt;/code&gt;。计算节点只需要执行&lt;code class=&quot;highlighter-rouge&quot;&gt;slurmd -c&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.zxh.site/2018/08/26/HPC-series-6-setup-slurm/#more&quot;&gt;HPC 系列文章 (6):Slurm 部署&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/mknoxnv/ubuntu-slurm/issues/12&quot;&gt;unable to ‘make’ slurm · Issue #12 · mknoxnv/ubuntu-slurm (github.com)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://slurm.schedmd.com/quickstart_admin.html&quot;&gt;Slurm Workload Manager - Quick Start Administrator Guide (schedmd.com)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://zhangcheng.fun/2018/06/14/slurm安装配置/&quot;&gt;slurm安装配置 - 尘曲的个人博客 &lt;/a&gt;&lt;/p&gt;</content><author><name>Canarypwn</name></author><category term="Technology" /><category term="Linux" /><category term="HPC" /><category term="CentOS" /><category term="slurm" /><summary type="html">Slurm 任务调度工具（前身为极简Linux资源管理工具，英文：Simple Linux Utility for Resource Management，取首字母，简写为SLURM），或 Slurm，是一个用于 Linux 和 Unix 内核系统的免费、开源的任务调度工具，被世界范围内的超级计算机和计算机群广泛采用。它提供了三个关键功能。第一，为用户分配一定时间的专享或非专享的资源(计算机节点)，以供用户执行工作。第二，它提供了一个框架，用于启动、执行、监测在节点上运行着的任务(通常是并行的任务，例如 MPI)，第三，为任务队列合理地分配资源。</summary></entry><entry><title type="html">2020总结</title><link href="https://aaaab3n.moe/life/2021/01/15/2020-summary.html" rel="alternate" type="text/html" title="2020总结" /><published>2021-01-15T02:01:59+00:00</published><updated>2021-01-15T02:01:59+00:00</updated><id>https://aaaab3n.moe/life/2021/01/15/2020-summary</id><content type="html" xml:base="https://aaaab3n.moe/life/2021/01/15/2020-summary.html">&lt;p&gt;如果我相信生活并且热爱生活，我会强烈赞同自由主义，又强烈的推崇权威和专制。我相信每个人都有自我，之后成为少数的几种意识形态的傀儡，然后再反意识形态。个人呢？我会强烈的依照精神分析以去除自己内心的每一处黑暗与龌龊，又必须成为一个非全能的要犯错( Must Make Mistakes )的人。我会成为孩子，又变成骆驼，既在洞穴( Plato’s Cave )中，又在花斑母牛镇。是立即要死的，又是不朽的，狂热于逃避现实去追求生活中的理想，醉心于贪心每一个选择做出最优解。不过总之，我会&lt;strong&gt;语无伦次&lt;/strong&gt;，并且&lt;strong&gt;精神分裂&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;—— Sir Canarypwn Appleby&lt;/p&gt;

&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;在我着手写这篇总结的时候，已经是寒假开始一周了。因为去年没有暑假的关系，或许我能有幸度过上科大有史以来最长的一次寒假。交完了 ASC20-21 的proposal，倒时差，以及做了一些零碎的活，觉得现在是时候写年度总结了。&lt;/p&gt;

&lt;p&gt;身边的人写了很多精彩的年度总结，比如文体不限诗歌除外每年的新年寄语，在农历新年的时候应该还会有第二次祝福；又比如&lt;a href=&quot;https://blog.zhuangty.com/2020/12/24/2020/#more&quot;&gt;一个“失败”人士的 2020 - 纯纯的 Blog &lt;/a&gt;，&lt;del&gt;某迟先生真的是黑暗能量之源&lt;/del&gt;。&lt;/p&gt;

&lt;p&gt;今年是进入大学的第二年，人生的每时每刻都在做 exploration 和 exploitation ，像老虎机一样。现实意义上失败的我自然无法像其他人那样大声宣扬着今后的道路以构建出美好且值得努力的幻象，只能向大家讲述一年中我所体验的一些事情，即使是一年的跨度在整个人生长度中也不值一提。&lt;/p&gt;

&lt;h2 id=&quot;-career--life&quot;&gt;~ (Career ^ Life)&lt;/h2&gt;

&lt;p&gt;几天前看实在狗子的知乎动态，他抱怨道出生于90年代的他成长过程中信息匮乏，如果能看到更多的书说不定能有更大的成就；但他又转念一说，出生于00年代的人们生下来就被过剩的信息包围，说不定也是一种弊端。学计算机科学的我就是非常典型的00后，自从小学学会上网起就被过度的暴露在信息之中。无数先辈们在我们之前早已走成了他们的路，例如找实习，做磕盐，或者打比赛等等，这些在交大生存手册中有着详尽的描述，相信有些读者们已经聊熟于心了，以至于当我和别人聊天的时候是这么说的，我虽然看不清远方的路，更看不清终点是什么，但我似乎就像 A* 算法一样，一直在想着终点走去，外部性的知识塑造了我的 h(x)，让我明白如何走更接近终点。&lt;/p&gt;

&lt;p&gt;过去一年中我似乎也在遵循着这个法则，因为有很多人坚持认为 GPA 并不是大学的全部，对于想进入工业界的人实习经历可能更加重要；对于理想为科学研究的人，早早进入实验室积累经验会有所帮助。&lt;/p&gt;

&lt;p&gt;vizna 听完这么告诉我，她希望有一个 lifetime goal。lifetime goal，是一种实现了以后，即使躺进棺材中也会笑着离去的东西。而其他的目标，例如 career goal, academic goal etc. 都是为 lifetime goal 服务的。她在做每一个决定的时候都会考虑是否会对实现lifetime goal有所帮助。她希望我能找到 lifetime goal，并且认为这是大学生活中较为重要的几件事之一。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Zizek： 当你在黑暗的隧道中看到一束光的时候，先别为此而兴奋，因为它除了可能是隧道的出口外，还可能是一辆疾驶而来的火车。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;模拟退火&quot;&gt;模拟退火&lt;/h2&gt;

&lt;p&gt;算法课有一次作业是求解旅行商问题，模拟退火是一个解决思路。首先得到一个贪心的路径，接着不断的改变行走的路径，以一定的概率去接受新的变化，即使它可能暂时绕远路，但也提供了发现更优道路的可能。它能给予我们的启示在于：可以尝试着去拓宽自己的道路，去尝试不同的方向，通过经历不同的事情与失败，以及最重要的，生活中的&lt;strong&gt;随机性&lt;/strong&gt;来获得得到全局最优解的可能。&lt;/p&gt;

&lt;p&gt;换言之，追求局部最优解不一定能找到全局最优解。我们赖以生存的，包围在我们身边的信息既是帮手又有严重的副作用，一个人有时候可能过于追求捷径而无法找到人生的意义。Shao Ziyu的概率论课上，讲的最多的相声是关于贝叶斯的，说的最多的词是蒙特卡洛树搜索。他这么说， exploration 和 exploitation 是相对的，需要交替的使用两种策略以找到最优解。如同老虎机一样，你可以继续摇第一个拉杆，因为它还没有出奖券，所以出奖券的几率更大，也可以选择摇第二个拉杆，因为这样有助于增进对整体的预测。&lt;/p&gt;

&lt;p&gt;对生活的体验与热爱是找到 lifetime goal 的一种途径，这种热爱是非完全功利性的，也是非理想主义的，甚至还需要生活中的一些随机性，我姑且将这虚无的随机性称为命运。&lt;/p&gt;

&lt;h2 id=&quot;goal-与-禁忌-taboo&quot;&gt;Goal 与 禁忌 (taboo)&lt;/h2&gt;

&lt;p&gt;在我思索了一番后，这么回复，我希望 &lt;strong&gt;以对抗21世纪的晚期资本主义&lt;/strong&gt; 为 lifetime goal 。这个 lifetime goal 看起来足够宏大，我 system engineer 的 career goal 似乎也与此契合。突然间我似乎感觉到了无与伦比的主观能动性，并且似乎发现了生活的意义所在。就像 revolution os 所描述的上个世纪的源代码开源运动一样，我希望能够以 developer 的视角给生活带来更多的美好与方便，并希望借助开源理念来守卫资本主义侵蚀下的现代生活。&lt;/p&gt;

&lt;p&gt;然而，lifetime goal 在我看来又是一种绝对的宏大叙事，因为它对于我来说大到凭借个体的力量难以将其完全实现，它就如同图腾一般作为象征物存在。在我看来，将一种虚拟之物作为生活的意义是极其危险的，taboo一次既有神圣的意思，又有禁忌的意思，原意指部落中神圣的图腾反而是集结了部落的禁忌之物，人们将其悬挂以产生一种发自内心般的畏惧，从而阻止自身触犯禁忌。lifetime goal 的宏大性也是如此，因为 lifetime goal 本身就是一种束缚与限制。但是，lifetime goal 确定的过程本身就是一种神圣的认同仪式，通过对生活的感知与体会，一切经历的总和将人心甘情愿的献给了lifetime goal。因此我很难确定 lifetime goal 于我是什么，它更多的是一种不可言说的象征之物，因为我的生活不可避免的被其所影响；与此同时，具像化的 lifetime goal 又被我本能的所排斥，因为它宏大到了极点，反而成为了极不可能实现之物，极虚无之物。&lt;/p&gt;</content><author><name>Canarypwn</name></author><category term="Life" /><category term="Life" /><summary type="html">如果我相信生活并且热爱生活，我会强烈赞同自由主义，又强烈的推崇权威和专制。我相信每个人都有自我，之后成为少数的几种意识形态的傀儡，然后再反意识形态。个人呢？我会强烈的依照精神分析以去除自己内心的每一处黑暗与龌龊，又必须成为一个非全能的要犯错( Must Make Mistakes )的人。我会成为孩子，又变成骆驼，既在洞穴( Plato’s Cave )中，又在花斑母牛镇。是立即要死的，又是不朽的，狂热于逃避现实去追求生活中的理想，醉心于贪心每一个选择做出最优解。不过总之，我会语无伦次，并且精神分裂。</summary></entry><entry><title type="html">概率论与统计的速成指南</title><link href="https://aaaab3n.moe/education/2021/01/06/MATH1212.html" rel="alternate" type="text/html" title="概率论与统计的速成指南" /><published>2021-01-06T02:01:59+00:00</published><updated>2021-01-06T02:01:59+00:00</updated><id>https://aaaab3n.moe/education/2021/01/06/MATH1212</id><content type="html" xml:base="https://aaaab3n.moe/education/2021/01/06/MATH1212.html">&lt;h1 id=&quot;lecture-1-课程简介&quot;&gt;Lecture 1: 课程简介&lt;/h1&gt;

&lt;h1 id=&quot;lecture-2-什么是样本&quot;&gt;Lecture 2: 什么是样本&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;所有可能加在一起就是样本空间 S 。 这里又分为离散的和连续的。${1,2,3,4}$这样就是离散的，而$(1,4)$这样就是连续的。从数学上就很容易看出来。此外还有有限和无限的区别。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;集合论画画图就很显然&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;三大公理宛如常识：&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://oss.aaaab3n.moe/uPic/ecwxip.png&quot; alt=&quot;ecwxip&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Probability Laws for Assigning Probabilities&lt;/strong&gt;： 几个中有几个，不就是分数的基本定义吗。&lt;/li&gt;
  &lt;li&gt;所以做概率题就几步：
    &lt;ol&gt;
      &lt;li&gt;确定题目中的概率&lt;/li&gt;
      &lt;li&gt;确定几个（基本的）样本空间&lt;/li&gt;
      &lt;li&gt;确定它们的概率&lt;/li&gt;
      &lt;li&gt;通过各种操作算（各种各样的、其它的）的事件的概率&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;lecture-3-古老概率论&quot;&gt;Lecture 3: 古老概率论&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;计数原理：加一加，乘一乘&lt;/li&gt;
  &lt;li&gt;有序且放回：放回——每次概率相同，有序——一个一个拿。所以是 $n^k$
    &lt;ul&gt;
      &lt;li&gt;也可以说是n个球放到k个罐头中有多少种情况&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;有序且不放回：不放回——拿一个少一个，有序——一个一个拿。所以是$n(n-1)(n-2) \dots (n-k+1)$
    &lt;ul&gt;
      &lt;li&gt;n种物品因此有$n!$种排列方式，例如你每拿一个东西就塞到队列里，那就是unique的。
        &lt;ul&gt;
          &lt;li&gt;也就是n个不一样东西恰好放进n个档中的情况&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;无序不放回： 有序且不放回是$n(n-1)(n-2) \dots (n-k+1)$。m个元素有$m!$种排列，那么为了抹掉它的序号，通过相除的方法平凡化。
    &lt;ul&gt;
      &lt;li&gt;$C_n^r = (\frac{n!}{r!(n-r)!})= \frac{A_n^r}{r!} $&lt;/li&gt;
      &lt;li&gt;这叫做二项分布&lt;/li&gt;
      &lt;li&gt;也可以理解为n个球放到r个档中&lt;/li&gt;
      &lt;li&gt;n个球中有r个黑球的情况&lt;/li&gt;
      &lt;li&gt;情况A中发生情况B = $\frac{在A内B发生了 \cdot 在A外B的其它部分发生了}{情况A发生}$&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;lecture-4-条件概率贝叶斯&quot;&gt;Lecture 4: 条件概率&amp;amp;贝叶斯&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;img src=&quot;https://oss.aaaab3n.moe/uPic/afUGdJ.png&quot; alt=&quot;afUGdJ&quot; /&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;https://oss.aaaab3n.moe/uPic/telegram-cloud-photo-size-5-6316699949911354363-y.jpg&quot; alt=&quot;telegram-cloud-photo-size-5-6316699949911354363-y&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;1是$\frac13$ 二是 $\frac12$ ，因为年长意味着独立事件。多出来的信息改变了概率。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;以及变形&lt;img src=&quot;https://oss.aaaab3n.moe/uPic/oSg3xx.png&quot; alt=&quot;oSg3xx&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;总概率定理：&lt;img src=&quot;https://oss.aaaab3n.moe/uPic/yTnSsU.png&quot; alt=&quot;yTnSsU&quot; /&gt;
    &lt;ul&gt;
      &lt;li&gt;就是把分散在各个事件上的发生概率加起来&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;贝叶斯定理：&lt;img src=&quot;https://oss.aaaab3n.moe/uPic/ZeypkT.png&quot; alt=&quot;ZeypkT&quot; /&gt;
    &lt;ul&gt;
      &lt;li&gt;知道A发生后推断$B_j$发生的概率&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;两个独立事件同时发生：两个事件的概率相乘
    &lt;ul&gt;
      &lt;li&gt;也就是说要分清是不是独立事件以确定用什么公式解题&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;lecture-5-伯努利&quot;&gt;Lecture 5: 伯努利&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;伯努利实验：抛硬币&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;因此顺序的发生一系列事件的概率就是把每一次发生的概率乘起来&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;https://oss.aaaab3n.moe/uPic/vFwdHe.png&quot; alt=&quot;vFwdHe&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;因为不知道是第几次成功/失败的，只知道成功的次数或者最终在哪里成功，所以需要乘一个二项式系数&lt;/li&gt;
      &lt;li&gt;成功1次、2次、3次、n次的概率和为1。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;几何分布&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;​	在&lt;a href=&quot;https://zh.wikipedia.org/wiki/概率论&quot;&gt;概率论&lt;/a&gt;和&lt;a href=&quot;https://zh.wikipedia.org/wiki/统计学&quot;&gt;统计学&lt;/a&gt;中，&lt;strong&gt;几何分布&lt;/strong&gt;（英语：Geometric distribution）指的是以下两种离散型&lt;a href=&quot;https://zh.wikipedia.org/wiki/機率分佈&quot;&gt;概率分布&lt;/a&gt;中的一种：&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;在&lt;a href=&quot;https://zh.wikipedia.org/wiki/伯努利試驗&quot;&gt;伯努利试验&lt;/a&gt;中，得到一次成功所需要的试验次数&lt;em&gt;X&lt;/em&gt;。&lt;em&gt;X&lt;/em&gt;的值域是{ 1, 2, 3, … }&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;在得到第一次成功之前所经历的失败次数&lt;em&gt;Y&lt;/em&gt; = &lt;em&gt;X&lt;/em&gt; − 1。&lt;em&gt;Y&lt;/em&gt;的值域是{ 0, 1, 2, 3, … }&lt;/li&gt;
          &lt;li&gt;也就是按p的概率去试，每试一次成功的概率都会变（因为你之前失败过了）。就相当于你把之前的&lt;strong&gt;非气&lt;/strong&gt;都聚集起来了，也就是$(1-p)^{k-1}$。所以它的概率质量函数是 $(1-p)^{k-1}p$&lt;/li&gt;
          &lt;li&gt;累计分布函数就是拿1减去你的非气值。$1-(1-p)^{k}$。&lt;/li&gt;
          &lt;li&gt;每次抽到的概率是p ，所以期望是 $\frac1p$&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;用途：在重复多次的&lt;a href=&quot;https://zh.wikipedia.org/wiki/伯努利試驗&quot;&gt;伯努利试验&lt;/a&gt;中，试验进行到某种结果出现第一次为止，此时的试验总次数服从几何分布，如：射击，首次击中目标时的次数。或者炉石抽卡。&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;lecture-6&quot;&gt;Lecture 6:&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;随机变量： 把不是数学中的东西用数字表示
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;离散型随机变量[&lt;a href=&quot;https://zh.wikipedia.org/w/index.php?title=随机变量&amp;amp;action=edit&amp;amp;section=4&quot;&gt;编辑&lt;/a&gt;]&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;即在一定区间内变量取值为有限个，或数值可以一一列举出来。例如某地区某年人口的出生数、死亡数，某药治疗某病病人的有效数、无效数等&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;连续型随机变量[&lt;a href=&quot;https://zh.wikipedia.org/w/index.php?title=随机变量&amp;amp;action=edit&amp;amp;section=5&quot;&gt;编辑&lt;/a&gt;]&lt;/p&gt;
        &lt;ul&gt;
          &lt;li&gt;即在一定区间内变量取值有无限个，或数值无法一一列举出来。例如某地区男性健康成人的身长值、体重值，一批传染性肝炎患者的血清转氨酶测定值等。&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;概率质量函数： 发生X的概率，但是是离散的&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;可能是离散的，也可能是离散的，因为y值代表着概率，所以取值在0，1之间&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;「&lt;strong&gt;只有两种可能，试验结果相互独立且对立&lt;/strong&gt;」的随机变量通常称为伯努利随机变量&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;这样的随机变量可以用伯努利分布解&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;lecture-7-期望和方差&quot;&gt;Lecture 7: 期望和方差&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;期望 &lt;img src=&quot;https://oss.aaaab3n.moe/uPic/vFexkw.png&quot; alt=&quot;vFexkw&quot; /&gt;
    &lt;ul&gt;
      &lt;li&gt;期望不是“expected value” since it doen’t belongs to possible values (可能取值) 期望应该是和概率或者概率分布相关的函数值&lt;/li&gt;
      &lt;li&gt;有些时候期望和平均值差不多&lt;/li&gt;
      &lt;li&gt;那么稍有常识的人就会想到是pmf的微元自积的累加&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;https://oss.aaaab3n.moe/uPic/lscFgq.png&quot; alt=&quot;lscFgq&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;同时，它还是线性的&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;https://oss.aaaab3n.moe/uPic/0Fs1kg.png&quot; alt=&quot;0Fs1kg&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;方差：
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;https://oss.aaaab3n.moe/uPic/SqPJlA.png&quot; alt=&quot;SqPJlA&quot; /&gt;（用线性性质可证明）
        &lt;ul&gt;
          &lt;li&gt;记住公示就能解很多题了&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;运算性质&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;https://oss.aaaab3n.moe/uPic/n4FIU7.png&quot; alt=&quot;n4FIU7&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;lecture-8-条件概率&quot;&gt;Lecture 8: 条件概率&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Conditional Probability Mass Function
    &lt;ul&gt;
      &lt;li&gt;分类讨论，随机应变&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;条件期望和条件方差
    &lt;ul&gt;
      &lt;li&gt;换一下概率和值&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;lecture-9-各种分布&quot;&gt;Lecture 9: 各种分布&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;看cheatsheet&lt;/li&gt;
  &lt;li&gt;泊松分布
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;https://oss.aaaab3n.moe/uPic/kAokJH.png&quot; alt=&quot;kAokJH&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;给一个概率参数，柏松分布告诉你在某个（不连续）时间成功第一次发生这件事的概率&lt;/li&gt;
      &lt;li&gt;和 $t$ 有关&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;一些练习
    &lt;ul&gt;
      &lt;li&gt;我们能仅基于pmf确定期望和方差&lt;/li&gt;
      &lt;li&gt;期望值不一定是RV可以采用的可能值之一&lt;/li&gt;
      &lt;li&gt;E [X]对应于X的许多观测值中X的平均值。&lt;/li&gt;
      &lt;li&gt;RV的期望值不等于等于该RV的期望值的函数（RV stands for radom variable ）&lt;/li&gt;
      &lt;li&gt;E [g（X）]可以从X的pmf计算得出。&lt;/li&gt;
      &lt;li&gt;Var [X]度量X的值通常与平均值相差多少。&lt;/li&gt;
      &lt;li&gt;标准偏差与方差不具有相同的单位。&lt;/li&gt;
      &lt;li&gt;均值和方差是随机变量的矩的示例。&lt;/li&gt;
      &lt;li&gt;第n个矩不能等于第n个中心矩&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;lecture-10-cdf--pdf&quot;&gt;Lecture 10: CDF &amp;amp; PDF&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;CDF：
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;https://oss.aaaab3n.moe/uPic/vWyiS5.png&quot; alt=&quot;vWyiS5&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;显然就是把 PMF 的密度累加起来&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;https://oss.aaaab3n.moe/uPic/MphXAM.png&quot; alt=&quot;MphXAM&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;https://oss.aaaab3n.moe/uPic/ujp33X.png&quot; alt=&quot;ujp33X&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;https://oss.aaaab3n.moe/uPic/eOUhvQ.png&quot; alt=&quot;eOUhvQ&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;PDF
    &lt;ul&gt;
      &lt;li&gt;累计分布函数的微分&lt;/li&gt;
      &lt;li&gt;可以大于1&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;lecture-11随机变量期望&quot;&gt;Lecture 11:随机变量：期望&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;期望
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;https://oss.aaaab3n.moe/uPic/uai1e8.png&quot; alt=&quot;uai1e8&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;方差
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;https://oss.aaaab3n.moe/uPic/GISxaO.png&quot; alt=&quot;GISxaO&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Exponential Random Variable
    &lt;ul&gt;
      &lt;li&gt;指数分布可以用来表示独立随机事件发生的时间间隔，比如旅客进入机场的时间间隔、打进客服中心电话的时间间隔、中文维基百科新条目出现的时间间隔等等。&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;https://oss.aaaab3n.moe/uPic/pczSji.png&quot; alt=&quot;pczSji&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;高斯随机变量
    &lt;ul&gt;
      &lt;li&gt;正态分布&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Q-function
    &lt;ul&gt;
      &lt;li&gt;Q(x) =1− Φ(x) = P[X &amp;gt; x]，where X is a Gaussian with m = 0 and σ = 1.&lt;/li&gt;
      &lt;li&gt;symmetry&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;https://oss.aaaab3n.moe/uPic/c3qmxj.png&quot; alt=&quot;c3qmxj&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;lecture12-matlab&quot;&gt;Lecture12: Matlab&lt;/h1&gt;

&lt;p&gt;———-期中考试分割线————-&lt;/p&gt;

&lt;h1 id=&quot;lecture13-多变量&quot;&gt;Lecture13: 多变量&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;联合随机分布
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;https://oss.aaaab3n.moe/uPic/lW5MeG.png&quot; alt=&quot;lW5MeG&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;https://oss.aaaab3n.moe/uPic/4zZxbB.png&quot; alt=&quot;4zZxbB&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;https://oss.aaaab3n.moe/uPic/HQWFHt.png&quot; alt=&quot;HQWFHt&quot; /&gt;
        &lt;ul&gt;
          &lt;li&gt;i或者j = N 的概率就相当于把那行或者那列的概率相加&lt;/li&gt;
          &lt;li&gt;以此可以得出X或者Y的pmf&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;非常interesting的一道题
        &lt;ul&gt;
          &lt;li&gt;&lt;img src=&quot;https://oss.aaaab3n.moe/uPic/mOHDiZ.png&quot; alt=&quot;mOHDiZ&quot; /&gt;&lt;/li&gt;
          &lt;li&gt;&lt;img src=&quot;https://oss.aaaab3n.moe/uPic/zyL8wI.png&quot; alt=&quot;zyL8wI&quot; /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;lecture14二元微积分&quot;&gt;Lecture14：二元微积分&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;简单复习
    &lt;ul&gt;
      &lt;li&gt;微分&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;https://oss.aaaab3n.moe/uPic/rXZtD2.png&quot; alt=&quot;rXZtD2&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;积分&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;https://oss.aaaab3n.moe/uPic/E1spO5.png&quot; alt=&quot;E1spO5&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;PDF
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;https://oss.aaaab3n.moe/uPic/3hgM5y.png&quot; alt=&quot;3hgM5y&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;https://oss.aaaab3n.moe/uPic/yIWSaw.png&quot; alt=&quot;yIWSaw&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;CDF
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;https://oss.aaaab3n.moe/uPic/DAdbv5.png&quot; alt=&quot;DAdbv5&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;题目中通常会给出 xy 的约束条件，例如 y = 1 - x，那就很容易运用多变量积分来做。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;lecture15-独立性期望联合矩&quot;&gt;Lecture15: 独立性，期望，联合矩&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;定义：&lt;img src=&quot;https://oss.aaaab3n.moe/uPic/7zqh7y.png&quot; alt=&quot;7zqh7y&quot; /&gt;
    &lt;ul&gt;
      &lt;li&gt;所以联合分布函数就是两个独立变量的概率相乘，也就是$p(x,y) = p(x)\cdotp(y)$&lt;/li&gt;
      &lt;li&gt;相对的，如果有贝叶斯关系，那就用贝叶斯公式&lt;/li&gt;
      &lt;li&gt;结合先前的结果：如果存在一对&lt;strong&gt;离散&lt;/strong&gt;的RV，则它们是独立的并且只有联合pmf是边际pmf的乘积！ (if and only if)
        &lt;ul&gt;
          &lt;li&gt;这个结论对cdf和pmf都成立&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;期望&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;$E[Z]=\int_{-\infty}^{\infty} \int_{-\infty}^{\infty} g(x, y) f_{X, Y}(x, y) d x d y$&lt;/li&gt;
      &lt;li&gt;离散时$E[Z]=\sum_{j} \sum_{k} g(j, k) p_{X, Y}(j, k)$&lt;/li&gt;
      &lt;li&gt;已知X和Y的期望就加起来 &lt;strong&gt;the mean of the sum is the sum of the means.&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Joint Moments&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Joint moment: $E\left[X^{j} Y^{k}\right]=\int_{-\infty}^{\infty} \int_{-\infty}^{\infty} x^{j} y^{k} f(x, y) d x d y \quad$ (the $j k$ th moment $)$&lt;/li&gt;
      &lt;li&gt;Central moment: $E\left[(X-E[X])^{j}(Y-E[Y])^{k}\right]$&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;https://oss.aaaab3n.moe/uPic/5bHWD7.png&quot; alt=&quot;5bHWD7&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;协方差&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;$\operatorname{COV}(X, Y)=E[(X-E[X])(Y-E[Y])]$&lt;/li&gt;
      &lt;li&gt;表示了X,Y一起偏离中心值的表现&lt;/li&gt;
      &lt;li&gt;当协方差是正的，XY一起偏离&lt;/li&gt;
      &lt;li&gt;当协方差是负的，可能一个向正偏离一个向负&lt;/li&gt;
      &lt;li&gt;可以理解为x,y函数的斜率一样的东西&lt;/li&gt;
      &lt;li&gt;也是线性的&lt;/li&gt;
      &lt;li&gt;常用公式
        &lt;ul&gt;
          &lt;li&gt;$\operatorname{COV}[X, Y]=E[X Y]-E[X] \cdot E[Y]$&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;不相关性&lt;/li&gt;
      &lt;li&gt;X and Y are uncorrelated if and only if  $ E[X Y]=E[X] E[Y] $&lt;/li&gt;
      &lt;li&gt;$ X $ and $ Y $ are uncorrelated if $ \operatorname{COV}[\mathrm{X}, \mathrm{Y}]=0 $&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;https://oss.aaaab3n.moe/uPic/GJDBDf.png&quot; alt=&quot;GJDBDf&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;方差之和： ProofProof
\(\begin{aligned}
\operatorname{VAR}[Z] &amp;amp;=E\left[(Z-E[Z])^{2}\right] \\
&amp;amp;=E\left[(X+Y-E[X]-E[Y])^{2}\right] \\
&amp;amp;=E\left[((X-E[X])+(Y-E[Y]))^{2}\right] \\
&amp;amp;=E\left[(X-E[X])^{2}\right]+2 E[(X-E[X])(Y-E[Y])]+E\left[(Y-E[Y])^{2}\right] \\
&amp;amp;=\operatorname{VAR}[X]+2 \operatorname{COV}(X, Y)+\operatorname{VAR}[Y]
\end{aligned}\)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;协方差系数&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Definition: The correlation coefficient between $ X $ and $ Y $ is
\(\rho_{X, Y}=\frac{\operatorname{COV}[X, Y]}{\sigma_{X} \sigma_{Y}}=\rho_{Y, X}\)
where $ \sigma_{X}^{2}=\operatorname{VAR}(X) $ and $ \sigma_{Y}^{2}=\operatorname{VAR}(Y) $&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;相关系数的大小≤1。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;有一道例题，很显然熟悉方差公式，标准差和方差的转换公式就做出来了&lt;img src=&quot;https://oss.aaaab3n.moe/uPic/nF7h2N.png&quot; alt=&quot;nF7h2N&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;lecture-16-条件概率和期望&quot;&gt;Lecture 16: 条件概率和期望&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;The conditional pmf of $ Y $ given $ X $ is&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;\(p_{Y \mid X}(k \mid j)=\frac{P[Y=k, X=j]}{P[X=j]}=\frac{p_{X, Y}(j, k)}{p_{X}(j)} \quad \text { if } p_{X}(j)&amp;gt;0\)
and undefined otherwise&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Define the conditional cdf of $ Y $ given $ X=k $ as:
\(F_{Y \mid X}(y \mid k)=\frac{P[Y \leq y, X=k]}{P[X=k]} \mid \text { if } P[X=k]&amp;gt;0\)
and as undefined otherwise.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;The conditional pdf of $ Y $ given $ X=k $ is defined as:
\(f_{Y \mid X}(y \mid k)=\frac{\partial}{\partial y} F_{Y \mid X}(y \mid k)\)
    &lt;ul&gt;
      &lt;li&gt;Interpretation: probability density of $ Y $ assuming that $ X=k $.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;条件cdf和pdf满足常规的所有属性 cdf 和 pdf。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;条件概率密度函数的性质们：&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;https://oss.aaaab3n.moe/uPic/XgPuEV.png&quot; alt=&quot;XgPuEV&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;条件期望&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;​	$ E[Y \mid x]=\int_{-\infty}^{\infty} y f_{Y \mid X}(y \mid x) d y  $ if $ Y $ is continuous&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;$ E[Y \mid x]=\sum_{j} j \cdot p_{Y \mid X}(j \mid x) \quad $ if $ Y $ is discrete and integer valued&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;More generally, if $ g(Y) $ is a random variable, then
\(E[g(Y) \mid x]=\int_{-\infty}^{\infty} g(y) f_{Y \mid X}(y \mid x) d y\)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;​	&lt;img src=&quot;https://oss.aaaab3n.moe/uPic/yphSLn.png&quot; alt=&quot;yphSLn&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;通过期望消除条件概率&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;$ E[g(Y)]=E[E[g(Y) \mid X]] $&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;最小均方误差估计&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Estimating a RV X by a constant c, i.e., finding c to minimize&lt;/li&gt;
      &lt;li&gt;$ \operatorname{MSE}(c)=E\left[(X-c)^{2}\right]=\int^{\infty}(x-c)^{2} f_{X}(x) d x $&lt;/li&gt;
      &lt;li&gt;$ c=E[X] $&lt;/li&gt;
      &lt;li&gt;在&lt;a href=&quot;https://zh.wikipedia.org/wiki/統計學&quot;&gt;统计学&lt;/a&gt;和&lt;a href=&quot;https://zh.wikipedia.org/wiki/信号处理&quot;&gt;信号处理&lt;/a&gt;中，&lt;strong&gt;最小均方误差&lt;/strong&gt;（英语：Minimum mean-square error，缩写&lt;strong&gt;MMSE&lt;/strong&gt;）估计是一种使&lt;a href=&quot;https://zh.wikipedia.org/wiki/均方误差&quot;&gt;均方误差&lt;/a&gt;（MSE）最小化的&lt;a href=&quot;https://zh.wikipedia.org/wiki/估计函数&quot;&gt;估计函数&lt;/a&gt;，其通常被称为最优估计&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;lecture-17-两个随机变量的一个函数&quot;&gt;Lecture 17: 两个随机变量的一个函数&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;https://oss.aaaab3n.moe/uPic/23OmRg.png&quot; alt=&quot;23OmRg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://oss.aaaab3n.moe/uPic/0GUpPW.png&quot; alt=&quot;0GUpPW&quot; /&gt;&lt;/p&gt;

&lt;p&gt;注意离散和连续的区别&lt;/p&gt;

&lt;h1 id=&quot;lecture-18-随机向量&quot;&gt;Lecture 18: 随机向量&lt;/h1&gt;

&lt;p&gt;多变量微积分练习&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://oss.aaaab3n.moe/uPic/XAJGKT.png&quot; alt=&quot;XAJGKT&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;多项式分布&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;$ p_{X_{1}, X_{2}, \ldots, X_{m}}\left(k_{1}, k_{2}, \ldots, k_{m}\right)=\frac{n !}{k_{1} ! k_{2} ! \ldots . k_{m} !} p_{1}^{k_{1}} p_{2}^{k_{2}} \ldots p_{m}^{k_{m}} $
if $ k_{1}+k_{2}+\ldots+k_{m}=n $ and $ k_{i} \geq 0 $ for all $ i, $ and zero otherwise&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;边际统计&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Eliminate variables from a pdf (pmf) by integrating (summing)
\(\begin{array}{l}
f_{X_{1} X_{2} \ldots X_{n-1}}\left(x_{1}, x_{2}, \ldots, x_{n-1}\right)=\int_{-\infty}^{\infty} f_{X_{1} X_{2} \ldots X_{n}}\left(x_{1}, x_{2}, x_{3}, \ldots, x_{n}\right) d x_{n} \\
p_{X_{1} X_{2} \ldots X_{n-1}}\left(k_{1}, k_{2}, \ldots, k_{n-1}\right)=\sum_{k_{n}=-\infty}^{\infty} p_{X_{1} X_{2} \ldots X_{n}}\left(k_{1}, k_{2}, k_{3}, \ldots, k_{n}\right)
\end{array}\)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Get marginal by successive integrations:
\(\begin{array}{l}
f_{X_{1}}\left(x_{1}\right)=\int_{-\infty}^{\infty} \ldots \int_{-\infty}^{\infty} f_{X_{1} X_{2} \ldots X_{n}}\left(x_{1}, x_{2}, x_{3}, \ldots, x_{n}\right) d x_{2} \ldots d x_{n} \\
p_{X_{1}}\left(k_{1}\right)=\sum_{k_{2}=-\infty}^{\infty} \ldots \sum_{k_{n}=-\infty}^{\infty} p_{X_{1} X_{2} \ldots X_{n}}\left(k_{1}, k_{2}, k_{3}, \ldots, k_{N}\right)
\end{array}\)&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;条件概率
    &lt;ul&gt;
      &lt;li&gt;Conditional pdf
$ f_{X_{1} X_{2} \mid X_{3}}\left(x_{1}, x_{2} \mid x_{3}\right)=\frac{f_{X_{1} X_{2} X_{3}}\left(x_{1}, x_{2}, x_{3}\right)}{f_{X_{3}}\left(x_{3}\right)} $
$ f_{X_{1} \mid X_{2} X_{3}}\left(x_{1} \mid x_{2}, x_{3}\right)=\frac{f_{X_{1} X_{2} X_{3}}\left(x_{1}, x_{2}, x_{3}\right)}{f_{X_{2} X_{3}}\left(x_{2}, x_{3}\right)} $&lt;/li&gt;
      &lt;li&gt;Conditional $ \mathrm{pmf} $
$ p_{X_{1} X_{2} \mid X_{3}}\left(k_{1}, k_{2} \mid k_{3}\right)=\frac{p_{X_{1} X_{2} X_{3}}\left(k_{1}, k_{2}, k_{3}\right)}{p_{X_{3}}\left(k_{3}\right)} $
$ p_{X_{1} \mid X_{2} X_{3}}\left(k_{1} \mid k_{2}, k_{3}\right)=\frac{p_{X_{1} X_{2} X_{3}}\left(k_{1}, k_{2}, k_{3}\right)}{p_{X_{2} X_{3}}\left(k_{2}, k_{3}\right)} $&lt;/li&gt;
      &lt;li&gt;乘法法则
        &lt;ul&gt;
          &lt;li&gt;$ p_{X_{1} X_{2} X_{3}}\left(k_{1}, k_{2}, k_{3}\right)=p_{X_{1} \mid X_{2} X_{3}}\left(k_{1} \mid k_{2}, k_{3}\right) p_{X_{2} \mid X_{3}}\left(k_{2} \mid k_{3}\right) p_{X_{3}}\left(k_{3}\right) $&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;独立与期望
    &lt;ul&gt;
      &lt;li&gt;​	&lt;img src=&quot;https://oss.aaaab3n.moe/uPic/J7sUwS.png&quot; alt=&quot;J7sUwS&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;lecture-19-高斯随机变量&quot;&gt;Lecture 19: 高斯随机变量&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;之前写过&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;lecture-20-大数定理&quot;&gt;Lecture 20: 大数定理&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;随机变量的和&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;​	$ E\left[\sum_{j} X_{j}\right]=\sum_{j} E\left[X_{j}\right] $&lt;/li&gt;
      &lt;li&gt;$ \operatorname{VAR}\left(\sum_{j=1}^{n} X_{j}\right)=\sum_{j=1}^{n} \operatorname{VAR}\left(X_{j}\right)+\sum_{j=1}^{n} \sum_{k \neq j} \operatorname{COV}\left(X_{j}, X_{k}\right) $&lt;/li&gt;
      &lt;li&gt;$ \operatorname{VAR}(X+Y)=\operatorname{VAR}(X)+\operatorname{VAR}(Y)+2 \operatorname{COV}(X, Y) $&lt;/li&gt;
      &lt;li&gt;$ \operatorname{VAR}\left(\sum_{j=1}^{n} X_{j}\right)=\sum_{j=1}^{n} \operatorname{VAR}\left(X_{j}\right) $&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;样本均值&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Let $ X_{1}, X_{2}, \ldots ., X_{n} $ be $ n $ independent repeated measurements of $ X $ and define the sample mean as&lt;/li&gt;
      &lt;li&gt;$ M_{n}=\frac{1}{n} \sum_{j=1}^{n} X_{j} $&lt;/li&gt;
      &lt;li&gt;样本均值是无偏的
        &lt;ul&gt;
          &lt;li&gt;$ Y $ is said to be $ \underline{\text { unbiased }} $ if $ \mathrm{E}[Y]=c $&lt;/li&gt;
          &lt;li&gt;Suppose $ Y $ (a random variable) is an estimate of a constant $ c $. Typically, $ Y $ is some function of a set of measurements.&lt;/li&gt;
          &lt;li&gt;The sample mean is an unbiased estimator of $ m=\mathrm{E}\left[X_{i}\right] $&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;样本均值方差随n减小&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;常用不等式&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;马尔可夫不等式&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;$ P[X \geq a] \leq \frac{E[X]}{a} $&lt;/li&gt;
          &lt;li&gt;&lt;img src=&quot;https://oss.aaaab3n.moe/uPic/agirYC.png&quot; alt=&quot;agirYC&quot; /&gt;&lt;/li&gt;
          &lt;li&gt;弱边界：意思是不准&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;切比雪夫不等式&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;Let $ X $ be a random variable with mean $ m $ and variance $ \sigma^{2} . $ The Chebyshev Inequality states that for any $ a&amp;gt;0 $
\(P[\mid X-m \geq a] \leq \frac{\sigma^{2}}{a^{2}}=\left(\frac{\sigma}{a}\right)^{2}\)&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;In other words, for any a large enough (compared the standard deviation), the probability that X is farther than a from the mean is negligible&lt;/li&gt;
          &lt;li&gt;&lt;img src=&quot;https://oss.aaaab3n.moe/uPic/XHCwgL.png&quot; alt=&quot;XHCwgL&quot; /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;弱大数定理&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Let $ X_{1}, X_{2}, \ldots $ be a sequence of i.i.d. random variables with finite mean $ m $. For any $ \varepsilon&amp;gt;0 $
\(\lim _{n \rightarrow \infty} P\left[\left|M_{n}-m\right|&amp;lt;\varepsilon\right]=1\)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;强大数定理&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Let $ X_{1}, X_{2}, \ldots . $ be a sequence of i.i.d. random variables with finite mean $ \mu $ and finite variance, then
\(P\left[\lim _{n \rightarrow \infty} M_{n}=\mu\right]=1\)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;弱定律说，通过选择足够的测量值n均值很有可能接近真实均值（在ε内）。&lt;/li&gt;
  &lt;li&gt;但是，它不能确保进行额外的测量样本均值更接近于任何特定序列的真实均值测量。&lt;/li&gt;
  &lt;li&gt;相反，强法则说，概率为1的每个序列样本均值计算将最终接近并保持在µ附近&lt;/li&gt;
  &lt;li&gt;统计规律性和收敛性
    &lt;ul&gt;
      &lt;li&gt;在第一章中，我们注意到我们观察了许多统计规律
物理现象，即多次重复获得的平均值
实验一致地产生大约相同的值。&lt;/li&gt;
      &lt;li&gt;基于此观察，我们将相对频率的属性用于
为概率论定义一组公理&lt;/li&gt;
      &lt;li&gt;现在，我们走了一个完整的圈子，表明该理论预测了观察到的统计规律性。例如，事件的相对频率应
收敛到该事件的可能性&lt;/li&gt;
      &lt;li&gt;理论预测和观察到的行为之间的这种一致性
是概率论如此有用的原因之一&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;lecture-21-中心极限定理&quot;&gt;Lecture 21: 中心极限定理&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;心极限定理说明，在适当的条件下，大量相互独立&lt;a href=&quot;https://zh.wikipedia.org/wiki/随机变量&quot;&gt;随机变量&lt;/a&gt;的均值经适当标准化后&lt;a href=&quot;https://zh.wikipedia.org/wiki/依分布收敛&quot;&gt;依分布收敛&lt;/a&gt;于&lt;a href=&quot;https://zh.wikipedia.org/wiki/正态分布&quot;&gt;正态分布&lt;/a&gt;。
    &lt;ul&gt;
      &lt;li&gt;Central Limit Theorem: $ \lim &lt;em&gt;{n \rightarrow \infty} P\left[Z&lt;/em&gt;{n}&amp;lt;z\right]=\frac{1}{\sqrt{2 \pi}} \int_{-\infty}^{z} e^{\frac{-x^{2}}{2}} d x $
In other words, the distribution of $ Z_{n} $ approaches the distribution of a Gaussian with zero mean and unit variance&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;lecture-22-随机过程&quot;&gt;Lecture 22: 随机过程&lt;/h1&gt;

&lt;p&gt;Definition: A random process or stochastic process maps a probability space $ S $ to a set of functions, $ X(t, \xi) $&lt;/p&gt;

&lt;h1 id=&quot;lecture-23&quot;&gt;Lecture 23&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;均值和方差
    &lt;ul&gt;
      &lt;li&gt;时域&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;相关和协方差函数
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;https://oss.aaaab3n.moe/uPic/2uMqa8.png&quot; alt=&quot;2uMqa8&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;多个随机过程&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;lecture-24-离散时间随机过程&quot;&gt;Lecture 24： 离散时间随机过程&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;随机过程和&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Definition: A sum process $ S_{n} $ is obtained by taking the sum of all past values of an i.i.d. random process $ X_{n} $, i.e.
\(S_{n}=\sum_{i=1}^{n} X_{i}=X_{1}+X_{2}+\ldots+X_{n}\)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ISI Processes&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;​	&lt;img src=&quot;https://oss.aaaab3n.moe/uPic/DXD4TV.png&quot; alt=&quot;DXD4TV&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;https://oss.aaaab3n.moe/uPic/3hhxjF.png&quot; alt=&quot;3hhxjF&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;The mean and variance of ISI processes grow linearly&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;https://oss.aaaab3n.moe/uPic/dRvn8B.png&quot; alt=&quot;dRvn8B&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;$ C_{S}(m, n)=\sigma^{2} \min (m, n) $&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;lecture-25-continuous-time-isi-random-processes&quot;&gt;Lecture 25: Continuous Time I.S.I. Random Processes&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Poisson Random Process&lt;/li&gt;
  &lt;li&gt;Additional Random Processes (FYI)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;lecture-26-随机过程2&quot;&gt;Lecture 26： 随机过程2&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Stationary Random Processes&lt;/li&gt;
  &lt;li&gt;Wide Sense Stationary (WSS) Random Processes&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;lecture-27-统计&quot;&gt;Lecture 27: 统计&lt;/h1&gt;

&lt;h1 id=&quot;summary&quot;&gt;Summary&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;没救了，我显然的要挂科了&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;files&quot;&gt;Files&lt;/h1&gt;</content><author><name>Canarypwn</name></author><category term="Education" /><category term="Education" /><summary type="html">Lecture 1: 课程简介</summary></entry><entry><title type="html">Intel Hackathon 2020 记录</title><link href="https://aaaab3n.moe/life/2020/12/17/intel-hackthon.html" rel="alternate" type="text/html" title="Intel Hackathon 2020 记录" /><published>2020-12-17T02:01:59+00:00</published><updated>2020-12-17T02:01:59+00:00</updated><id>https://aaaab3n.moe/life/2020/12/17/intel-hackthon</id><content type="html" xml:base="https://aaaab3n.moe/life/2020/12/17/intel-hackthon.html">&lt;h1 id=&quot;d-14&quot;&gt;D-14&lt;/h1&gt;

&lt;p&gt;大约在两周前收到了来自社长的&lt;a href=&quot;https://growthx.mysxl.cn/blog/2020-intel-open-innovation-hackathon&quot;&gt;推送&lt;/a&gt;，正好最近想恰点钱，之前的外包也没写完，于是准备去参加。正好 DEEMOS 实验室在做 CV 相关，所以我们自然选了赛道二。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://snz04pap002files.storage.live.com/y4mJX8lG_caQpWluBgBs8a-kzYnmMVmVVQ9mJiN7u6STtdB4Oq3ofYR3BEKKj--gwRofPJzEDtDyFUx_Ye_jvsvmRku_5adc-9EnuKzZ5IQQbTCCA6j725IVW6qh5UhQDlMegoZeMzlmbyJWM2ZiwgcZ_0eGhhT_kaMeGcztifF-m6K03l35EzN6dZk_d3glrYn?width=1080&amp;amp;height=708&amp;amp;cropmode=none&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;一开始的时候 intel 没有释放任何消息，不过我们猜测他们会给一个 SDK， 可能是超分辨率或者怎样的。但两周后就要参赛了，所以我们只能先找一个不错的创意。我们想到了将 UGC 用于匿名聊天，因为 DEEMOS 最近在做&lt;a href=&quot;https://anome.geekpie.club&quot;&gt;人脸风格化&lt;/a&gt;，而匿名聊天如果能让用户定义自己的形象，而这个形象和本人又有关联，不仅有趣还能规避一些问题。&lt;/p&gt;

&lt;p&gt;社长这时候说，他们以前去 Hackathon 通常都是在之前做掉 75% 后再去现场的，所以让我们提前做好充足的准备。&lt;/p&gt;

&lt;p&gt;我们进行了更加深入的讨论，我们大胆假设了 intel 给的这个 SDK 性能可以做到实时的视频处理 &lt;del&gt;因为连这都做不到这个网络也太菜了&lt;/del&gt; ，所以我们考虑了诸如狼人杀，剧本杀，跑团，语C，桌游模拟器这类。因为我们认为在游戏中加入风格化后可以让游戏变得更加好玩，而且像剧本杀这种本来在线下就要化妆，而且很好玩也很贵。如果在疫情这种时候搬到线上，如果我们做的效果还不错的话，那应该挺吸引人。intel 在本次比赛中还需要商业计划书，于是我们制定了 ToB 和 ToC 的两套方案，既可以卖给企业又可以做一个 app 给大家玩。&lt;/p&gt;

&lt;p&gt;最后简单分了一下锅以后就散会了，一切等 intel 公布 SDK。&lt;/p&gt;

&lt;h1 id=&quot;d-7&quot;&gt;D-7&lt;/h1&gt;

&lt;p&gt;在 D-7 日的时候，intel 公布了他们的 SDK，是一个将视频中的某个长期存在的对象进行替换，比如将猫片中的猫换一种眼睛的颜色这种。除此之外没有任何其他信息。如果我们要继续做之前的方案的话，这个 SDK 能不能进行直播我们是不知道的。&lt;/p&gt;

&lt;p&gt;于是我们又讨论出了一套方案，主要市场在于特效拍摄。灵感主要来自于影视飓风的一期视频。主要是人物，风格，场景的改变。&lt;/p&gt;

&lt;p&gt;当晚我们下楼去 DEEMOS 和学长们讨论，&lt;del&gt;被批判了一番&lt;/del&gt;。 UGC 和相关技术的论文在13年就有发布，但是一直找不到合适的落地场景。我们提出的”Fantastic Movie for everyone”明显不显示，否则早就有人做了。而且我们想的 styleGAN + intel SDK 几乎人人都会想到。而剧本杀的市场太小了。同时这项技术没有技术壁垒，快手抖音很方便就可以占领（虽然他们目前的滤镜效果一塌糊涂），学长传授了他的一些人生经验：多读论文，多看新闻，多上知乎。另一位学长提出了是不是可以往电商直播方面想，因为目前直播的互动其实不多。&lt;/p&gt;

&lt;p&gt;于是我们回到了社团，并且开始了&lt;code class=&quot;highlighter-rouge&quot;&gt;多读论文，多看新闻，多上知乎&lt;/code&gt;。发现学长不愧身经百战，因为我们找到了 intel SDK 的 source …&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;https://github.com/OndrejTexler/Few-Shot-Patch-Based-Training&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;居然连代码也不改，放在 ShanghaiTech 就等着收查重邮件吧&lt;/p&gt;

&lt;p&gt;于是我们对代码进行了评估，发现可以做直播，于是又继续讨论。社长希望我们发挥年轻人的优势，发现其他人发现不了的热点。&lt;/p&gt;

&lt;h1 id=&quot;d-4&quot;&gt;D-4&lt;/h1&gt;

&lt;p&gt;我们讨论了几乎所有东西，比如虚拟偶像，电视剧换装，婚恋市场，早教市场，艺术市场等等。发现还是做制作视频时的风格改变比较好。至少有60%的希望成功吧，如果 demo 做的还不错的话。于是开始了分工。一共五个人，一个人准备slides, presentation 和商业计划书； murez 负责神经网络训练; Logan 负责辅助神经网络训练；Leomond 负责后端和直播推流； 我负责&lt;del&gt;打杂&lt;/del&gt;前端和服务器。&lt;/p&gt;

&lt;p&gt;与此同时，我们准备复现一个 demo。&lt;/p&gt;

&lt;p&gt;https://www.bilibili.com/video/BV14a4y1W7ua&lt;/p&gt;

&lt;h1 id=&quot;d-2&quot;&gt;D-2&lt;/h1&gt;

&lt;p&gt;晚上的时候， Leomond 骑平衡车刷运动世界校园的时候由于上海沉降严重路面凹凸不平导致多处皮外伤，他&lt;del&gt;坚持跑完了运动世界&lt;/del&gt;后来社团寻求帮助。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://snz04pap002files.storage.live.com/y4mBVc33ZQPRxLrMEmLWt_9ONBMbz2979OdMKNDNmd57prp_uSGCTY4k8DV5HrtiWYAEgBr3pqGCTAIHVbS6fYl6Qz4KFtVM45wiH6HW5LAtlnqJTaVsxq0DXGebe1Kj01GCb2Y1fve0wNMYFZ6eGk05DSwrbvRDofOJVvra__9_jObxF4oNgIu-ezwLe_rwwcb?width=768&amp;amp;height=1024&amp;amp;cropmode=none&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;好在 ShanghaiTech 每个实验室都有 First Aid，几位大佬对急救的处理非常得当， Leomund 在学校也有常备药箱，附近实验室最近买了小米的平衡车轮椅套件，最终在凌晨3点， Leomund 回到了寝室。当晚， murez 开始训练第一个风格。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://snz04pap002files.storage.live.com/y4mDXcwzsnj1ZAQprxA3MNFf5t13Zqld77kcixHPTUfktm2a9f-Jcd2Po00WHE4ZMwJQh4Jk9x9fOA2Hz80flOi70ED25Boo5jc9N-vB86e0O7TJxlzP2t8aRkFo5EnPljPtyJ9T3rNIoFMv-J_3VRAsiP42tWOS2tvI1plGxqYyZy87sk3RSWDP5QkkbdbF0A-?width=1024&amp;amp;height=384&amp;amp;cropmode=none&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;赛博朋克2077 于今日8点解禁。&lt;/p&gt;

&lt;h1 id=&quot;d-1&quot;&gt;D-1&lt;/h1&gt;

&lt;p&gt;中午打包出发去北京。路上我的 surface 还因为磕了一下导致触屏报废 （开始收集 mbp 预算）&lt;/p&gt;

&lt;p&gt;总结一下，我们这次在去北京前完成了&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;整个计划，包括商业计划&lt;/li&gt;
  &lt;li&gt;前端模板，还缺和后端对接部分与推流&lt;/li&gt;
  &lt;li&gt;多个 styleGAN 模型，一些是实验室有的，一些是刚刚训练的，赛博朋克2077的模型也在当天开始训练&lt;/li&gt;
  &lt;li&gt;etc&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;同时我们全部开发人员配置了连回社团的 wireguard， 并用 FRP 映射出了三台服务器。因为我们有HPC团队的成员和实验室的搬砖工。这些机器包括&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;借用 HPC 的 2*64 核 AMD 处理器 + 8 * NVIDIA V100&lt;/li&gt;
  &lt;li&gt;实验室的 2080Ti * n&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;光说这些上百万的资源也没什么队伍能打败我们了吧（大嘘&lt;/p&gt;

&lt;p&gt;乘上了3点的高铁，高铁上的网络信号还是一点都不好，导致我们睡了一路。当晚入住了中关村旁边的如家酒店，黑客松还带酒店的体验是非常好的。当晚吃了旁边的达美乐。出来以后看到酒店门口一群人在玩滑板，想到如果有一段这样的风格化视频也是很好的，于是在他们的同意之下拍了一段他们的视频。&lt;/p&gt;

&lt;p&gt;当晚继续之前的计划，应该是凌晨睡觉的。murez 训练出了赛博朋克风格。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://snz04pap002files.storage.live.com/y4m_bkzZiyEh52EZm7qkEFnBtwBU5ctKfRPK63Mb720n29fneduoyrxnQvNmeklnhDPesm74fOxWlRbLSDO0TF4_xWzsZvPG01JrP0jrYGtiJmZKlcELA1chbjo1I62OEVlIXhG0v0XJp8SRpxbycpG5yun0WSfV3PJCZsp2wqEh13adM0X6RGdmqVkqIHoeC2T?width=1024&amp;amp;height=346&amp;amp;cropmode=none&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;d-day&quot;&gt;D day&lt;/h1&gt;

&lt;p&gt;早上8点打车来到比赛现场，现场的早饭是星巴克的可颂，TUNA和培根，不限量供应。（所以一个队友一个早上吃了五个，值回成本）&lt;/p&gt;

&lt;p&gt;进了会场内发现周围挺空的，就我们五个人占了一桌，铺了六台电脑显得有点挤。隔壁一个上大的研究生只身前来，还没做什么准备，看到我们的架势被吓了一跳。&lt;/p&gt;

&lt;p&gt;中饭和晚饭都是自助餐，就是有些辣。&lt;/p&gt;

&lt;p&gt;晚上出门的时候还下雪了，照了一张 Google 的雪景。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://snz04pap002files.storage.live.com/y4mqxf5lMBeXrBXOmwqfGFmh8eiFvJe5-OSYyUlW8O-PnIhQh2tdWYRsko1lPj0S5Cxd67FUtHknEh73NtWyuNV00H4I3eQTQlll6RybBauGA7Qn5ySU6kfgdV3b2srX07rIP9wv1PaqVR4OfnwFg66ffEi0eLr9-my9IfhtGGDVsLY5yh73rSlv3_63LIjP6tI?width=1024&amp;amp;height=803&amp;amp;cropmode=none&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当晚回酒店后又是很紧张的调试。 Logan 帮我解决了 Vue 的一些问题，凌晨的时候我把和后端对接的代码大致写完了。负责 pre 的队友和我们商讨 slides 和措辞，并且由同学帮助美化 slides。L 努力的优化 ffmepg 的推流，通过添加 buffer 的方法将直播帧率提高到了 512*512@17fps 。这个帧率是将源视频推流到上科大校内的某台服务器，经过处理塞进神经网络再推流回来的，所以这个成绩非常惊人了。&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube-nocookie.com/embed/SytP1hhXPz4&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;而 murez 正在努力的进行赛博朋克风格的训练。我凌晨2点左右睡觉的，后来我才知道，murez 坚持到了凌晨 5点。&lt;/p&gt;

&lt;h1 id=&quot;d1&quot;&gt;D+1&lt;/h1&gt;

&lt;p&gt;这一天主要是开发的收尾工作。因为前后端对接问题我背了一些锅。其中发现了 Flask 的跨域问题，因为之前没有人用过 Flask 所以踩坑时间有点旧。不过最后因为 pre 效果的关系而没有采用前端演示的方案。&lt;/p&gt;

&lt;p&gt;商业计划在于我们是一种&lt;strong&gt;低成本高质量的视频解决方案&lt;/strong&gt;。如果不考虑 2B 的话，我们可以在每一个热点出来的第一时间发布预训练模型，帮助其他人制作。比如 bilibili 一个热点过后，一瞬间全是相关视频了。至少现在有些制作者还在用爱剪辑，那么我们提供的一个完整易用的解决方案会让很多用户来蹭热点。一方面这部分可以直接收钱，另一方面大量的使用也会间接的推动高性能芯片的销售和迭代，，就像抖音间接推动了智能手机的普及一样。&lt;del&gt;不过这里估计没 intel 什么事了&lt;/del&gt;。重要的是，这是一个基于热点话题，神经网络和硬件厂家的可以迭代的商业模式。&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube-nocookie.com/embed/TXjWvf2tOGk&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;在5分钟的pre里面演示了现场直播，效果还不错。其他组也有做赛博朋克风格的，但是完成度没我们高。上大的那位最后做了教育方向，希望用这个神经网络来教别人艺术。我觉得想法挺不错，demo也还可以，但是 Q&amp;amp;A 的时候感觉完全没答到点子上…其中还有一个公司做的是虚拟偶像。一位不太年轻的大叔在会场上公然放爱酱的视频，想做一个24小时的人工智能驱动虚拟偶像。他最后说了一句，”虚拟的偶像，不虚拟的经济“。看样子这些人还是 too old too naive 了，我觉得大部分都是泡沫（难道是我老了吗）。最后他们是第一名。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://snz04pap002files.storage.live.com/y4mkhgv1d7EvwOvzsLD5XnQnXWQ31V95yeNDqoRRrKQWsBQHfJ7nf9UxTiaDG1l_JMQk1oTy5VB9UdvNDpeLqXAFe_o2HGR8qqMyoOxbKFeKkw5D3ajuG5x9HD4gzEtXvAIoYTsbbfblpNUVEKXmaKoUzY_bdGRuxGayjlH4ZhWkj5V5Nhqr0Ek5V-ic2VcE0Do?width=1024&amp;amp;height=310&amp;amp;cropmode=none&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Intel hackthon 一共有四个赛道。还有一个高二的学生一个人一组，用毫米波雷达做耳机的手势控制。其实我们觉得在耳机上加毫米波是不错的想法，如果用毫米波去扫描耳道建模就更好了，他拿了三等奖。&lt;/p&gt;

&lt;p&gt;晚上的时候和姚班的东西在宇宙中心五道口约饭。比赛房赞助的酒店到期了，我们在airbnb上找了一家民宿。说是五个人，这家民宿只有三个大床房。&lt;strong&gt;男同竟在我身边&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://snz04pap002files.storage.live.com/y4mdjGn7VkV2YRmz_7d1xSQY4kIETTLHNxoSZMCEEt1Nwc73WvU_9cbIYQCJiV0M9gzh1mwNXsmVKuTU2_ysC2oJH1ZbeJac-K5J-XRvMAFWRGTArRGsJ-iR9DLKYHM5jIQC6yd_trSCW85akQmisHW-I6o7o5PHThaYhv4pk3QxVMIcZRLIGGcsfgagboIVF_M?width=720&amp;amp;height=270&amp;amp;cropmode=none&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;d2&quot;&gt;D+2&lt;/h1&gt;

&lt;p&gt;简单游览了一下就打道回府了。我去北理见了同学，吃了食堂的北京烤鸭。队友说要买烤鸭感谢社长，于是在嘎韭菜一条街的第一家店买了烤鸭。窗上写着64元两只。当我们走到中心的时候，见到了无数的稻香村，而且已经变成48元两只了。&lt;/p&gt;</content><author><name>Canarypwn</name></author><category term="Life" /><category term="Hackathon" /><summary type="html">D-14</summary></entry><entry><title type="html">[ CS140 1-Introduction] Slides 笔记</title><link href="https://aaaab3n.moe/technology/2020/12/04/CS140-L1.html" rel="alternate" type="text/html" title="[ CS140 1-Introduction] Slides 笔记" /><published>2020-12-04T02:01:59+00:00</published><updated>2020-12-04T02:01:59+00:00</updated><id>https://aaaab3n.moe/technology/2020/12/04/CS140-L1</id><content type="html" xml:base="https://aaaab3n.moe/technology/2020/12/04/CS140-L1.html">&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;This page is based on &lt;a href=&quot;http://web.stanford.edu/~ouster/cgi-bin/cs140-spring20/index.php&quot;&gt;CS 140: Operating Systems (stanford.edu)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Homework and Slides can be found at &lt;a href=&quot;http://www.scs.stanford.edu/20wi-cs140/notes/&quot;&gt;CS140 Lecture notes (stanford.edu)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Backup on my &lt;a href=&quot;https://1drv.ms/u/s!Au3reWMu7K2ChIp_v_ywDUA3QhkIAA?e=btMkiE&quot;&gt;Onedrive&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/328021529&quot;&gt;论抄书 - 知乎 (zhihu.com)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;操作系统概论&quot;&gt;操作系统概论&lt;/h2&gt;

&lt;h3 id=&quot;原始操作系统&quot;&gt;原始操作系统&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://sn3301files.storage.live.com/y4mh0qpst6d3FEypH6IoGiDxVjKKCdGpKHMhSC5bZfyyt1yZYYUec9SstWLT4whtooAqjlrgUgLC7tzeaJpD6rN_fIRehWu8pGaErnnqxFjvqFVn_uirLresyku0tC2C2vthbApgnPJjYLtsiKAialJTFBf3Ywex3bk3eJU92oZab021xVAJ7d1sNwzihUUdGQt?width=1024&amp;amp;height=473&amp;amp;cropmode=none&quot; alt=&quot;image-20201204140048431&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;系统一次只能运行一个程序
    &lt;ul&gt;
      &lt;li&gt;OS 和 硬件都被 APP 唯一占用&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;多线程&quot;&gt;多线程&lt;/h3&gt;

&lt;p&gt;相比原始操作系统，一次可以运行多个程序&lt;/p&gt;

&lt;p&gt;但原始的多线程有诸多问题&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;无限循环&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;比如&lt;a href=&quot;https://zh.m.wikipedia.org/zh-hans/Fork%E7%82%B8%E5%BC%B9&quot;&gt;叉炸弹&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;可以利用 权限 来解决&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;内存访问无限制，会有安全问题&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;可以用 内存隔离 来解决&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;多用户操作系统&quot;&gt;多用户操作系统&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://sn3301files.storage.live.com/y4m2MKgQtle0L3ijuplaxMdkRUXbeqyalVj5tj_2hXetgcmxsmdC4bLLQCny9EN3PenhA4o5cfkk-slNREGrw2OdUdNTOQOJQ6HoINX6uss5iALIF2uAZEzWPLLq_LJxv_vuqs8NpxaVOikkYhYb8emWcpPYv8RTEpU1Tb129YTuEv-oImS0KiSskSKGQF0Mngq?width=1024&amp;amp;height=641&amp;amp;cropmode=none&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;用户需要什么就给什么，但依旧会存在一些问题：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;程序太贪了 (Chrome吃内存)&lt;/li&gt;
  &lt;li&gt;当每个程序都申请内存的时候，申请内存的总量大于物理内存
    &lt;ul&gt;
      &lt;li&gt;解决: 虚拟化 (virtual memory, swap etc.)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Super-linear slowdown with increasing demand (thrashing) （原文）
    &lt;ul&gt;
      &lt;li&gt;比如开了N个程序，每个程序只能分到 1/N 的资源&lt;/li&gt;
      &lt;li&gt;随着程序的线性增加，每个程序更处理不完，最终&lt;del&gt;堵马桶&lt;/del&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;操作系统保护&quot;&gt;操作系统保护&lt;/h3&gt;

&lt;p&gt;核心思想：隔离&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;抢占式： 给应用程序一个资源，如果别的程序需要的话，就移走它&lt;/li&gt;
  &lt;li&gt;中间层： OS用一些数据结构（比如表）来查询权限，OS会在程序访问底层的时候提供权限管理&lt;/li&gt;
  &lt;li&gt;root / user ：特权模式&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;典型的操作系统&quot;&gt;典型的操作系统&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://sn3301files.storage.live.com/y4mn70BkNola6wrRUKxV7Bj5QN44VFXohASIeb2ikpUVlLjnkl2MYqbzeNH1QkULsc7-0FN2GZW2TT-Oh_I_m07KphZPO5d4R17WKwk_9V0BhzN9OVXC6U7Nzd8Mmjjj8I_f9crtPX9Hjw9nzVGDuyfok87qqksz0oOjkUMnf9leuxixYX6-a7y-yqakT412d_V?width=1024&amp;amp;height=568&amp;amp;cropmode=none&quot; alt=&quot;image-20201204141457542&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;程序在 user 层执行，低权限&lt;/li&gt;
  &lt;li&gt;OS 在 kernal 层执行，高权限&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;系统调用-system-call&quot;&gt;系统调用 (System Call)&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://sn3301files.storage.live.com/y4m4DCvJ_GPptwN7oLAeNjf6FkfMmijOfzzjcALtwCHHkO678KEk19-9siDkwGPI_P7b7X81vBMcsO_iknQqbgiFjAQNZp0lv0_CCOVGanpcKwfQR4DyOc4pJnwO_T2Z68FPByMLSVv0y83v1PZXQXwn_BHbOOm5uEAtEBFexQ5Cg7jUAwR4JQ2ixyo88Z-ntja?width=1024&amp;amp;height=601&amp;amp;cropmode=none&quot; alt=&quot;image-20201204141729074&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Applications can invoke kernel through system calls&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;应用程序可以通过系统调用来调用内核 (用特殊指令)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;应用程序&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;printf, scanf, fgets etc.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;系统接口&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;open, close, read, write etc. ( POSIX/UNIX )&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Example&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;printf 调用 write&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;img src=&quot;https://sn3301files.storage.live.com/y4mwvjtlByIoqbz6XTb5wfKLEMvzd5w1YWP_7fYROH8f0pXG4kQ4mO_h9WjHkIWrTwCVKojznhdFFH9BMXme91Owb8DpHJniqb_7MB2tg1KwJ42AcqtlxJqNs3iU_ORHBpl4aqcCj0ErmeTd1IuHS3MNRxC1nYK1jMRoVex52YZZk3b1gUgAkuraO5ywY_nkxbb?width=975&amp;amp;height=1024&amp;amp;cropmode=none&quot; alt=&quot;image-20201204142044506&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;另一个例子&quot;&gt;另一个例子&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;见 &lt;a href=&quot;http://www.scs.stanford.edu/20wi-cs140/notes/type.c&quot;&gt;type.c (stanford.edu)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;open 作为一个黑箱、接口返回状态码，便于调用与高级程序使用&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;保护&quot;&gt;保护&lt;/h2&gt;

&lt;h3 id=&quot;一个-cpu-保护的例子&quot;&gt;一个 CPU 保护的例子&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;内核时钟每 10ms 刷新一次检查权限&lt;/li&gt;
  &lt;li&gt;内核每次中断后由程序重新抢占&lt;/li&gt;
  &lt;li&gt;这样就避免了 CPU 无限循环&lt;/li&gt;
  &lt;li&gt;坏处是每个程序都很慢（之前提到过）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;###如何破坏计算机&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;把内存占满&lt;/li&gt;
  &lt;li&gt;叉炸弹&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;内存隔离&quot;&gt;内存隔离&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;定义
    &lt;ul&gt;
      &lt;li&gt;地址空间：一个程序占用的所有内存地址&lt;/li&gt;
      &lt;li&gt;虚拟地址：程序所见到的内存地址（即进程地址空间）&lt;/li&gt;
      &lt;li&gt;物理地址：物理的地址（内存）&lt;/li&gt;
      &lt;li&gt;翻译：将虚拟地址映射到物理地址 （页）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;优点：每一个进程都不知道别的进程的地址，因为它们看到的地址是不一样的&lt;/li&gt;
  &lt;li&gt;CPU 负责翻译&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;现代的内存保护&quot;&gt;现代的内存保护&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;CPU允许仅内核虚拟地址&lt;/li&gt;
  &lt;li&gt;CPU允许OS禁用（无效化）特定的虚拟地址
    &lt;ul&gt;
      &lt;li&gt;虚拟内存总大于物理内存&lt;/li&gt;
      &lt;li&gt;停止内存越界&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;因此便于优化（内存管理器只管理虚拟地址）&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;资源分配与调度&quot;&gt;资源分配与调度&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;一方面把所有资源给一个程序会让他跑得很快，但另一方面其它程序被中断了，会影响执行。
    &lt;ul&gt;
      &lt;li&gt;例如同一个任务在连续的物理内存上的访问速度很快&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;多线程对资源的利用率很高
    &lt;ul&gt;
      &lt;li&gt;AMD yes&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;通常情况下，少部分的任务是特别消耗运算的，其它任务加起来所占用的内存却很大。（二八效应？）
    &lt;ul&gt;
      &lt;li&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Canarypwn</name></author><category term="Technology" /><category term="CS140" /><summary type="html">Intro</summary></entry><entry><title type="html">近代史纲要期末论文</title><link href="https://aaaab3n.moe/education/2020/12/04/modern.html" rel="alternate" type="text/html" title="近代史纲要期末论文" /><published>2020-12-04T02:01:59+00:00</published><updated>2020-12-04T02:01:59+00:00</updated><id>https://aaaab3n.moe/education/2020/12/04/modern</id><content type="html" xml:base="https://aaaab3n.moe/education/2020/12/04/modern.html">&lt;h1 id=&quot;封建帝国末期的救亡图存与封建思潮的覆灭&quot;&gt;封建帝国末期的救亡图存与封建思潮的覆灭&lt;/h1&gt;

&lt;p&gt;摘要： 第一次鸦片战争揭示了近代史的开端，作为集前朝之大成的清王朝在面对内有外患时尽可能的延续自身。但种种改变最终因各种原因而失败。作者认为，旧体制下相比西方已经相对成熟的近代化世界，由于各种体系的缺乏产生了行政效率低下的问题。行政效率低下使得改革的成本上升，很多资源陷入了诸如政治内耗和贪污腐败，因而改革无法彻底，并且对于国力的损伤巨大。本文主要探讨了清王朝以及清朝中的各种势力采用的四种救亡图存的方法。第一个是太平天国，一个具有封建落后性的政权在面对因为封建主义而产生的改良新政权时，清王朝借助了外来的力量克服了难关，西方因变革而有的器物给了落后的封建王朝额外的力量，同时预示着封建思潮无法通过以迭代的消灭自身的方式得到进步。第二个是洋务运动，在清朝尝到对太平天国的胜果时希望进一步的借助西方的力量，尽管这为清王朝争取到了纸面上的力量，但是封建主义固有的行政效率低下问题导致了甲午海战的失败与洋务运动的破产。百日维新是来自民间的知识分子们尝试的由下而上的一次变革，也是新旧制度的正面冲突，虽然旧制度取得了上风，但是新思潮展现出了其力量。辛亥革命最终终结了形式上的封建帝国，完成了由旧到新的使命。&lt;/p&gt;

&lt;h2 id=&quot;旧式农民起义太平天国&quot;&gt;旧式农民起义：太平天国&lt;/h2&gt;

&lt;h3 id=&quot;太平天国的起因第一次鸦片战争&quot;&gt;太平天国的起因：第一次鸦片战争&lt;/h3&gt;

&lt;p&gt;在第一次鸦片战争后，由清王朝向列强赔款2800万元。这造成了巨大的亏空和逆差。据统计，道光二十七年至二十八年平均每年流出白银1000万元。这些钱最终被摊牌成了税收上的增加。当时的清王朝以农业为主，过重的税收最终造成了一般农民的破产和地主阶级对农民的土地兼并。手工业者阶级也因为鸦片战争所签订的南京条约，被更加廉价精良的外国工业品击败，最终破产。失去了土地和生活来源的农民和手工业者聚集在一起，为了生存而选择了起义。鸦片战争后十年间，各族人民自发的反清起义达100多次。&lt;/p&gt;

&lt;p&gt;在这一背景下，洪秀全借拜上帝教的名义，绘制了人人平等的远景，在传教过程中不断吸引教民，最终起义。与以往不同的是洪秀全结合了很多西方的宗教元素。这样一种接近西方的表象一方面为太平天国争取到了前期的来自西方的支持，另一方面让因为西方关系而破产或剥削的人民因此而感到自己拥有了特权。这种斯德哥尔摩式的反映表现了当时的人们对于初来乍到的西方话语厌恶但又不得不诚服的处境。&lt;/p&gt;

&lt;h3 id=&quot;太平天国的批判&quot;&gt;太平天国的批判&lt;/h3&gt;

&lt;p&gt;但是这种假借西方宗教与人民利益，实际依旧以封建传统统治为本的政治方式仍旧没有比以往的农民起义展现出更多的先进性。太平天国的消亡也和历次的农民战争展现出了一样的特征。在定都天京以后太平天国不再以惊人的速度扩展，英国人F. A. Lindley在1866年英文版《太平天国》第一卷中指出：“南京的占领完全改变了天王的战术，他不再继续进行由前进的恐怖来制衡满洲的、迅速和凯旋的进军，却把他的党徒集合在南京及郊区周围，在同一时期从事组织有朝廷和法院的正规政府。”与此同时，在政治上，洪秀全在天京被架空，东王和翼王开始争夺权力。在经济上，太平天国执行圣库制度。太平天国圣库的物资来源，约有以下五方面；一是造反初期持上帝全会众交给圣库的银粮衣物；二是打败清军或攻克城镇所获的战利品；三是各处城乡的员献及对富户派大捐、打先锋所得的财物；四是“科派”、田赋与工商税的收入；五是百工衙的生产品（如同今日的国营事业所得）等。天京城中设立的百式衙与诸匠营，是圣库物资的重要来源之一。这种表面上的经济平等无法继续迭代，经济计划最终必将破产。这样的政权，经济和武装是无法长久对抗清王朝和对太平天国敌视的西方列强。在上海，西方租界组建了洋枪队，利用先进火器阻挡了太平军的进攻。清王朝的洋务派们组建的精锐部队最终结束了太平天国。&lt;/p&gt;

&lt;p&gt;自古以来，中国大地上一次次政权更替的同时展现出了封建王朝自我更新迭代的生命力。太平天国虽然在制度上有所创新，但其本质还是封建思想和农民起义的旧产物。而清王朝相比之下通过学习西方，加上西方因为更好的维护自己在中国的利益而给与的援助，度过了一个封建王朝的晚期危机。这反而表明了封建主义自我迭代手段的失效以及资本主义与帝国主义所能给国家带来的强大生命力。在之后的时间里，洋务派因此占据了清王朝政治的主流，开启了一个封建王朝的自强运动。&lt;/p&gt;

&lt;h2 id=&quot;地主阶级洋务派洋务运动&quot;&gt;地主阶级洋务派：洋务运动&lt;/h2&gt;

&lt;h3 id=&quot;师夷长技旧制度的延续&quot;&gt;师夷长技：旧制度的延续&lt;/h3&gt;

&lt;p&gt;在清军和太平军两大敌对阵营的战争中，双方几乎是不约而同地同步实行“师夷长技”。两军对阵，指挥官和士兵对于敌方武器锐利程度感触最为敏锐，追求新式而有效战胜敌人的武器，最没有保守观点。太平军为了制胜清王朝而“师夷长技”，清军为了制胜太平军而“师夷长技”，这是历史的必然。1856年曾国藩攻陷安福县时，“夺获洋枪炮械藤牌四百余件”；1859年，曾国藩说太平右军主将韦志俊向湘军投降时所带“器械甚精，洋枪甚多”；同年胡林翼奏称太平军杨辅清攻池州城“施放洋枪子落如雨。” 因此在洋务运动中，各派系都在努力提高火器在军队中的比例。摇曳的清王朝有着十足的动力来进行军事方面的改革以一定程度上的保全自身，因此慈禧太后也予以推动。武器的西方化进而带动了经济，外交等的西方化。&lt;/p&gt;

&lt;p&gt;其中多项的引进与改革对今后的清王朝产生的深远的影响，在此进行列举说明：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;现代银行体系&lt;/p&gt;

    &lt;p&gt;清朝通过各种丧权辱国的条约，需要向列强赔付13.2亿白银（如果加上利息，数额则更加惊人），相当于1901年国家财政收入的11倍，这些钱远远超过了清朝的还款能力。在过去清朝的国库还有盈余的年代，天子必须通过游览旅行来消费国库中积蓄的无法流通的财富。而在现代金融制度的引进后，由外国人建立的海关和银行一方面为清王朝增加了收入，另一方面在清政府需要钱时提供贷款。甲午战争的赔款就是向英德法俄银行团借款来付的。洋务运动的产物在洋务运动失败后还能继续帮助清廷苟延残喘。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;新式教育（新学）&lt;/p&gt;

    &lt;p&gt;洋务派在全国修建了30余所近代新式学校，用来培养科学、军事、翻译人才。并且用于教育事业的投入在1900年后翻了几番，原因在于列强将庚子赔款的钱用于清王朝的教育设施。但直到清末新政，清朝选拔人才的方式依旧是科举，大量接受了新式教育的年轻人并不能找到能够接纳他们的工作，先进的自由平等思想使得他们对于清朝本身进行反思。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;不论是现代银行体系还是新式教育，他们一个反而使旧制度下的王朝受到了更加严重的剥削；一个不断的挖掘着王朝的根基。不断引进新思潮的旧王朝就像是自身的掘墓人。在面对列强所要求的巨额赔款时，清王朝选择向西方国家开设的银行贷款，用金融主权换得了一时的平安。英国人帮助清王朝建立了海关体系，海关的税收进而推动着洋务实业的创立。例如上海的轮船招商局的启动资金就来自于上海海关的收入。但随着洋务运动的推进以及失败，清王朝的新兴知识阶级越发认识到清王朝是丧权辱国，民不聊生的罪魁祸首，并以各种方式谋求来自民间的变革，也就是来自新兴资产阶级的变革。&lt;/p&gt;

&lt;h3 id=&quot;洋务运动的结局注定的失败&quot;&gt;洋务运动的结局：注定的失败&lt;/h3&gt;

&lt;p&gt;甲午战争的失败宣告着洋务运动的最终失败，体量更大的清王朝在军事上无法击败后发的过去同为封建王朝的日本国。尤其是在军备上并没有明显代差的情况下。究其原因，有来自过去封建势力的阻挠，皇家挪用经费等。在甲午战争前夕，翁同龢和李鸿章因为相互的争执而克扣了北洋水师的维护经费。总而言之，封建旧势力阻碍着王朝真正的变革。例如修圆明园时慈禧太后以过生日为名，这实则是由大奇观来展现国家统治的生命力。对于封建王朝，无疑有助于树立统治阶级的权威，但却严重降低了年度预算和行政效率，最终展现在了战舰和军队的缺乏维护上。同时，洋务派各派训练的部队更像封建时期私人性质的武装，在甲午海战战败后福建水师向日本所求一艘被缴获的战舰，理由是该船属于福建水师而非北洋，武装私人化可见一般。&lt;/p&gt;

&lt;p&gt;洋务运动的失败证明了封建王朝各种自我救赎的失败，表明了旧制度下的王朝难以通过来自自身的变革完成近代化的转变，旧行政制度下的行政效率低下问题无法承载起新思潮所创造的产物。封建王朝自强运动的失败证明了其晚期危机的到来。&lt;/p&gt;

&lt;h2 id=&quot;资产阶级改良派百日维新&quot;&gt;资产阶级改良派：百日维新&lt;/h2&gt;

&lt;h3 id=&quot;百日维新的背景&quot;&gt;百日维新的背景&lt;/h3&gt;

&lt;p&gt;在洋务派改革的30年间，被称为同治中兴。中兴一次寄托了对疾病缠身的清王朝重新复兴的希望。洋务运动的失败标志了同治中兴只不过是晚期封建主义最后仅存的一些精神而已。现代史学家芮玛丽所著《同治中兴》里面对“中兴”的定义如下：不但一个王朝，而且一个文明看来已经崩溃了，但由于19世纪60年代的一些杰出人物的非凡努力，它们终于死里求生，再延续了60年，这就是同治中兴。甲午海战的失败同时激起了新型知识分子的愤慨：国家复兴的希望又再次破灭。从国家层面上进行上至下的改革成为了不现实的事情，从新式学堂中出来的新兴知识分子们希望自己的意见能被清朝采纳。适逢光绪帝因甲午战败而锐意变法革新。这次变法得到了慈禧太后的默许。&lt;/p&gt;

&lt;h3 id=&quot;百日维新的结果&quot;&gt;百日维新的结果&lt;/h3&gt;

&lt;p&gt;百日维新本质上是新旧体制的正面冲突。新兴知识分子大刀阔斧的想对整个国家进行改革，以一种极端的方式带着整个国家步入近代化。而旧体制下的保守势力一方面不甘心自己政治话语的剥夺，另一方面看出了过激的改革有将整个国家带入灭亡的危险。最终旧体制因为掌握兵权而取得了暂时的优势。&lt;/p&gt;

&lt;p&gt;虽然代表旧体制的朝廷暂时占据了优势，但是原本拥戴朝廷的新兴知识分子们却不愿意再承认清朝的正统性。步入近代后国家主义开始觉醒，封建主义时期树立君主权威的方式在近代启蒙之后就不再适用。部分知识分子们认为，打到清廷才是实现国家强大的捷径，这一思想因而在知识分子中分化成了保皇党和革命党。新旧体制的冲突仍在继续。从百日维新以后，清王朝因为对变革的不信任，并且国力也不允许其体制发生根本上的改变，研究改革的主力落到了新兴知识分子身上。&lt;/p&gt;

&lt;p&gt;总的来说，封建体制维护自身的方式是为统治阶级树立权威。普通民众想要参与到日常的政治中去只有走官方指定的道路。同时封建体制在树立权威的同时造成了无意义的内耗。新兴的知识份子，也可以说是他们背后所代表的资产阶级，因为他们大多都是由新式学堂教育出来的，最终都将成为资产社会中的生产力，他们代表着资本主义的意识形态试图改善封建主义行政效率低下的问题以最大程度的利用生产力。&lt;/p&gt;

&lt;h2 id=&quot;后来的资产阶级革命派辛亥革命&quot;&gt;后来的资产阶级革命派：辛亥革命&lt;/h2&gt;

&lt;h3 id=&quot;新兴知识分子的作为&quot;&gt;新兴知识分子的作为&lt;/h3&gt;

&lt;p&gt;积重难返的清朝廷已无法从体制上根本的改变其封建主义的实质，清末新政虽然形式上学习西方，但由于主政大臣行政效率低下，国库亏空，满汉矛盾以及有改革报复的知识分子不是在逃就是被清政府通缉，剩下的也因为其他人的遭遇而不相信清朝廷的诚意。事实上，部分知识分子的信任在百日维新时就已经结束，黄兴最早在1903年筹划起义，一直持续到1911年。在这期间不乏知识分子与普通民众的支持。&lt;/p&gt;

&lt;p&gt;并且随着代表着自由平等的西方思想涌入，印刷业在上海的发展，举国上下都出现了同情革命者。这也让革命党人有机可乘。在多次的失败之后，武昌起义获得了成功，并最终推翻清朝的统治，因而第一次确立共和政体。&lt;/p&gt;

&lt;p&gt;但是革命党人面对袁世凯几乎没有取胜的可能，但袁世凯也不愿通过武力的方式获得权力，最终以约定的方式成为总统。&lt;/p&gt;

&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;

&lt;p&gt;正如现代人面临着从现代到后现代的迷茫一样，面对如此大体量的清朝，当时的统治阶级在进入近代史时必然需要试错，但世界上几乎没有一个国家能像清朝有如此强大的生命力进行如此多次的试错。在清朝一次次的实践中，我们可以总结出历史规律，如同严复的天演论一样，在面对内忧外患的情况下，一个能够进行军事研发动员，拥有强大生产力进行工厂生产，一个行政效率高避免腐败和内耗的体制才能度过筛选，避免灭亡的命运。&lt;/p&gt;</content><author><name>Canarypwn</name></author><category term="Education" /><category term="Essay" /><summary type="html">封建帝国末期的救亡图存与封建思潮的覆灭</summary></entry><entry><title type="html">使用 GitHub Actions 与 Cloudflare 重构博客体验</title><link href="https://aaaab3n.moe/technology/2020/11/28/github-and-cloudflare.html" rel="alternate" type="text/html" title="使用 GitHub Actions 与 Cloudflare 重构博客体验" /><published>2020-11-28T02:01:59+00:00</published><updated>2020-11-28T02:01:59+00:00</updated><id>https://aaaab3n.moe/technology/2020/11/28/github-and-cloudflare</id><content type="html" xml:base="https://aaaab3n.moe/technology/2020/11/28/github-and-cloudflare.html">&lt;h2 id=&quot;caution&quot;&gt;Caution&lt;/h2&gt;

&lt;p&gt;Due to rendering problem, some characters can’t be displayed correctly by markdown ( &lt;strong&gt;such as $&lt;/strong&gt; ). Read source code instead.&lt;/p&gt;

&lt;h2 id=&quot;为什么不自己-host-服务&quot;&gt;为什么不自己 Host 服务&lt;/h2&gt;

&lt;p&gt;正如 苏卡卡 在  &lt;a href=&quot;https://blog.skk.moe/post/cloud-and-sla/&quot;&gt; 谈谈云服务和 SLA &lt;/a&gt;  中说的，在线云服务的 SLA 相比自己 Host 一个服务，可用性有很明显的提升。而且 GitHub Pages, GitHub Actions 和 Cloudflare 都是有免费额度的，对于个人用户完全够用。相信很多人之前买了 VPS，之后因为各种原因没有做好备份导致写了很久的博客文章丢失的事情，GitHub 的存储服务也能解决这个问题。&lt;/p&gt;

&lt;h2 id=&quot;为什么不用之前的-netlify&quot;&gt;为什么不用之前的 Netlify&lt;/h2&gt;

&lt;p&gt;之前笔者是使用 Netlify 来构建博客的， Netlify 可以 Hook 住某个 GitHub repo， 在有 commit 的时候自动拉下来。它有一个 ubuntu 的虚拟环境，根据写的指令自动构建完后 Host 网页。 Netlify 还有自带的 CDN 和 DNS解析服务，在刚开始搭建博客的时候， Netlify 用的是 Digital Ocean 的 CDN，它的日本节点对于大陆网络的友好程度是要高于 Cloudflare 的。&lt;/p&gt;

&lt;p&gt;但最近 Netlify 推出了更加严格的限制，限制了网页流量和编译所用的时长。我一个月后去看发现欠费了 7 美元。再加上现在 DO 的 CDN 对大陆的友好程度直线下降， Cloudflare 在声誉和基础设施上的投入上也使我非常青睐。一个大一同学的项目  &lt;a href=&quot;https://github.com/Spedoske/CloudflareScanner&quot;&gt;Spedoske/CloudflareScanner (github.com)&lt;/a&gt; 可以扫描出最快的 Cloudflare 节点，有着很多用途。&lt;/p&gt;

&lt;h2 id=&quot;github-actions&quot;&gt;GitHub Actions&lt;/h2&gt;

&lt;p&gt;简单来说，GitHub Actions 可以提供一台无法直接访问的 Azure ，通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;.github/workflows/*.yml&lt;/code&gt; 执行所写的指令。 Azure 可以提供 Ubuntu 、 Windows 等环境。另一位同学的项目 &lt;a href=&quot;https://github.com/KiruyaMomochi/RediveExtract&quot;&gt;KiruyaMomochi/RediveExtract (github.com)&lt;/a&gt; 就是使用 GitHub Actions 抓取公主链接的新版本然后解包剧情推送到 Telegram Bot 上。甚至有人用 GitHub Actions 来自动构建 OpenWRT （&lt;a href=&quot;https://github.com/Hyy2001X/AutoBuild-Actions&quot;&gt;Hyy2001X/AutoBuild-Actions: 使用 Github Actions 编译 Openwrt&lt;/a&gt;）。本文主要介绍了三种框架的 GitHub Actions 。&lt;/p&gt;

&lt;h3 id=&quot;jekyll&quot;&gt;Jekyll&lt;/h3&gt;

&lt;p&gt;Jekyll 在官方 &lt;a href=&quot;https://jekyllrb.com/docs/continuous-integration/github-actions/&quot;&gt;GitHub Actions &lt;/a&gt; 提供了 GitHub Actions。不过由于我的依赖和官方的 bundler 版本冲突，所以选择自己写。&lt;/p&gt;

&lt;p&gt;该文件见  &lt;a href=&quot;https://github.com/Nyovelt/jekyll-theme-mdui/tree/master/.github/workflows&quot;&gt;jekyll-theme-mdui/.github/workflows at master · Nyovelt/jekyll-theme-mdui&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;name: Build and deploy Jekyll site to GitHub Pages

on:
  push:
    branches:
      - master
  workflow_dispatch:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;首先的 name 是整个 GitHub Action 的描述&lt;/li&gt;
  &lt;li&gt;on 代表何时触发 Action
    &lt;ul&gt;
      &lt;li&gt;push 代表当某个分支有提交时触发 push&lt;/li&gt;
      &lt;li&gt;workflow_dispatch 提供了网页手动触发&lt;/li&gt;
      &lt;li&gt;此外还有每按一次 star 触发 和 schedule 的按时触发&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jobs:
  github-pages:
    runs-on: ubuntu-latest
    steps:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;表示使用 ubuntu-latest 作为构建机的操作系统，用 docker 的同学应该很熟悉&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;      # Use GitHub Actions' cache to shorten build times and decrease load on servers
      - uses: actions/cache@v1
        with:
          path: vendor/bundle
          key: $-gems-$
          restore-keys: |
            $-gems-
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;由于 &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle install&lt;/code&gt;执行过程时间非常长，所以添加缓存来节省时间和公共资源。该代码块的意思是以每一个 Gemfile.lock 创建一次缓存，这样可以节省安装相应依赖所用的时间&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install gem git -y
          sudo gem install bundler:1.17.2 jekyll

      - name: Build jekyll
        run: |
          cd $
          bundle install
          bundle exec jekyll build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;这两个就和正常 ubuntu 的运行命令一样了。 其中 &lt;code class=&quot;highlighter-rouge&quot;&gt;$&lt;/code&gt;是 GitHub Actions 的环境变量，表示了 repo 所在的目录&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;      - name: Invoke Deployment
        with:
          ACCESS_TOKEN: $
          BRANCH: gh-pages
          FOLDER: _site
        uses: JamesIves/github-pages-deploy-action@3.2.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;这一段代码块是将特定文件夹 &lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt;内容推送到 &lt;code class=&quot;highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt;分支。其中 &lt;code class=&quot;highlighter-rouge&quot;&gt;secrets.ACCESS_TOKEN&lt;/code&gt;可以在 上文 Jekyll 的文档中找到描述，是在 secrets 里创建一个键值对，来记录你的 GitHub Token 。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;hugo&quot;&gt;Hugo&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;name: Build and deploy Hugo site to GitHub Pages

on:
  push:
    branches:
      - master
  workflow_dispatch:
  

jobs:
  github-pages:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          cd ~
          wget https://github.com/gohugoio/hugo/releases/download/v0.78.2/hugo_0.78.2_Linux-64bit.deb
          sudo dpkg -i hugo*.deb
          hugo version
           
      - name: Build Hugo
        run: |
          cd $
          hugo
          
      - name: Invoke Deployment
        with:
          ACCESS_TOKEN: $
          BRANCH: gh-pages
          FOLDER: public
        uses: JamesIves/github-pages-deploy-action@3.2.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;默认的 Ubuntu 是 bionic 版本，因此它的软件源不是最新的 （比如 apt 的 Hugo 版本是 0.4 因此不能正常编译）&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;node&quot;&gt;Node&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/amphineko/atomicneko/blob/master/.github/workflows/deploy-pages.yml&quot;&gt;atomicneko/deploy-pages.yml at master · amphineko/atomicneko (github.com)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;name: Deploy to GitHub Pages

on:
  push:
    branches: 
      - master
      - deploy-action
  workflow_dispatch:
  

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        persist-credentials: false

    - name: Invoke Webpack build
      run: |
        npm install .
        npm run build

    - name: Invoke Deployment
      with:
        ACCESS_TOKEN: $
        BRANCH: gh-pages
        FOLDER: dist
      uses: JamesIves/github-pages-deploy-action@3.2.1

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;github-pages--cloudflare&quot;&gt;GitHub Pages + Cloudflare&lt;/h2&gt;

&lt;p&gt;这个部分会介绍的简略一些，因为网上同类文档很多，而且操作很简单。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://sn3301files.storage.live.com/y4mW-R9hfnuB-2UE2bDy4bqoWFMDe08UL1prmOjxt4HU23XIsTj6OMY595LcnBBv7UsmPabV16ys7ZaGxIf7Qm8JUb4FKKwnE3Hy_pCkEe9Cdl24YMt28ecm5BOaMT9NpoK4mDBDKEsxljhCa7Z7uJcHUtB9VUkJ3xMzrXPDJrGgFG7GE6vJLdvmcxOZrC-_pG4?width=1024&amp;amp;height=442&amp;amp;cropmode=none&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;总之， Cloudflare 作为 CDN 提供了对网页 （也就是 GitHub Pages）的缓存，同时提供了很多安全选项，比如强制性的 https 和 TLS 。&lt;/p&gt;

&lt;p&gt;在从 Netlify 切换到了这一套新的架构以后，访问体验有了肉眼可见的提升。&lt;/p&gt;</content><author><name>Canarypwn</name></author><category term="Technology" /><category term="Cloudflare" /><category term="Blog" /><category term="Website" /><summary type="html">Caution</summary></entry></feed>